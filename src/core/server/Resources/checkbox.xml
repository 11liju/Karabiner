<?xml version="1.0"?>
<root>
  <list>
    <item>
      <name>General</name>
      <list>
        <item>
          <name>Suppress Growl warning</name>
          <appendix>This option suppresses the warning: "Growl is not running"</appendix>
          <appendix></appendix>
          <appendix>If you want to suppress the Growl notification itself,</appendix>
          <appendix>disable the notification of KeyRemap4MacBook from Growl Preferences.</appendix>
          <identifier essential="true">general.suppress_growl_warning</identifier>
        </item>
        <item>
          <name>------------------------------------------------------------</name>
        </item>
        <item>
          <name>Don't remap an internal keyboard</name>
          <identifier essential="true">general.dont_remap_internal</identifier>
        </item>
        <item>
          <name>Don't remap external keyboards</name>
          <identifier essential="true">general.dont_remap_external</identifier>
        </item>
        <item>
          <name>Don't remap any pointing devices</name>
          <identifier essential="true">general.dont_remap_any_pointing</identifier>
        </item>
        <item>
          <name>Don't remap Apple's keyboards</name>
          <identifier essential="true">general.dont_remap_apple_keyboard</identifier>
        </item>
        <item>
          <name>Don't remap Apple's pointing devices</name>
          <identifier essential="true">general.dont_remap_apple_pointing</identifier>
        </item>
        <item>
          <name>Don't remap non-Apple's keyboards</name>
          <appendix>(For example: Generic USB keyboard)</appendix>
          <identifier essential="true">general.dont_remap_non_apple_keyboard</identifier>
        </item>
        <item>
          <name>Don't remap non-Apple's pointing devices</name>
          <appendix>(For example: Generic USB mouse)</appendix>
          <identifier essential="true">general.dont_remap_non_apple_pointing</identifier>
        </item>
        <item>
          <name>Don't remap keyboards which has third vendor's driver</name>
          <appendix>(Logitech, Microsoft, Kensington, ...)</appendix>
          <identifier essential="true">general.dont_remap_thirdvendor_keyboard</identifier>
        </item>
        <item>
          <name>Don't remap pointing devices which has third vendor's driver</name>
          <appendix>(Logitech, Microsoft, Kensington, ...)</appendix>
          <identifier essential="true">general.dont_remap_thirdvendor_pointing</identifier>
        </item>
        <item>
          <name>Excluding Devices</name>
          <list>
            <item>
              <name>Don't Remap Logitech Cordless Presenter</name>
              <identifier essential="true">general.dont_remap_logitech_cordless_presenter</identifier>
            </item>
          </list>
        </item>
        <item>
          <name>------------------------------------------------------------</name>
        </item>
        <item>
          <name>Pass-Through CapsLock LED status</name>
          <appendix>(Don't enable this when you use "XXX to CapsLock")</appendix>
          <identifier essential="true">general.passthrough_capslock_led_status</identifier>
        </item>
        <item>
          <name>------------------------------------------------------------</name>
        </item>
        <item>
          <name>Don't restore modifiers in the mouse event</name>
          <appendix></appendix>
          <appendix>For example, when you use Option+Tab to Command+Tab,</appendix>
          <appendix>we send "Command+Click" when you did a mouse click while</appendix>
          <appendix>pushing the Option key after you pushed Option+Tab.</appendix>
          <appendix>"Option+Click" should be output, but this option changes this behavior.</appendix>
          <identifier essential="true">general.lazy_modifiers_with_mouse_event</identifier>
        </item>
        <item>
          <name>------------------------------------------------------------</name>
        </item>
        <item>
          <name>Disable NumPad Hack</name>
          <appendix>(Don't change Fn+JKL.. to NumPad, and other Fn+key combinations)</appendix>
          <identifier essential="true">general.disable_numpad_hack</identifier>
        </item>
      </list>
    </item>

    <item>
      <name>Pass Through Mode (Disable all settings temporarily)</name>
      <list>
        <item>
          <!-- Pass Through Mode Core -->
          <name>What is Pass Through Mode?</name>
          <appendix>You can disable all settings temporarily.</appendix>
          <appendix>Turn on a setting below, and toggle "Pass Through Mode".</appendix>
          <identifier vk_config="true">notsave.passthrough</identifier>
          <autogen>--ShowStatusMessage-- Pass Through</autogen>
        </item>
        <item>
          <name>Change Fn+Escape to toggle "Pass Through Mode"</name>
          <identifier>passthrough.fnescape</identifier>
          <autogen>--KeyToKey-- KeyCode::ESCAPE, ModifierFlag::FN, KeyCode::VK_LOCK_ALL_FORCE_OFF, KeyCode::VK_CONFIG_TOGGLE_notsave_passthrough</autogen>
        </item>
        <item>
          <name>Simultaneous Key Presses [Escape+Tab] to toggle "Pass Through Mode"</name>
          <identifier>passthrough.escapetab</identifier>
          <autogen>--SimultaneousKeyPresses-- KeyCode::ESCAPE, KeyCode::TAB, KeyCode::VK_LOCK_ALL_FORCE_OFF, KeyCode::VK_CONFIG_TOGGLE_notsave_passthrough</autogen>
        </item>
        <item>
          <name>Holding Escape to toggle "Pass Through Mode"</name>
          <identifier>passthrough.holding_escape</identifier>
          <autogen>--HoldingKeyToKey-- KeyCode::ESCAPE, ModifierFlag::NONE, KeyCode::ESCAPE, KeyCode::VK_NONE, KeyCode::VK_LOCK_ALL_FORCE_OFF, KeyCode::VK_CONFIG_TOGGLE_notsave_passthrough</autogen>
        </item>
      </list>
    </item>

    <include system_xml_path="include/checkbox/pointing_device.xml" />

    <include system_xml_path="include/checkbox/standards/arrow.xml" />
    <include system_xml_path="include/checkbox/standards/backquote.xml" />
    <include system_xml_path="include/checkbox/standards/backslash.xml" />
    <include system_xml_path="include/checkbox/standards/bracket.xml" />
    <include system_xml_path="include/checkbox/standards/capslock.xml" />
    <include system_xml_path="include/checkbox/standards/command.xml" />
    <include system_xml_path="include/checkbox/standards/control.xml" />
    <include system_xml_path="include/checkbox/standards/delete.xml" />
    <include system_xml_path="include/checkbox/standards/eject.xml" />
    <include system_xml_path="include/checkbox/standards/enter.xml" />
    <include system_xml_path="include/checkbox/standards/escape.xml" />
    <include system_xml_path="include/checkbox/standards/expose.xml" />
    <include system_xml_path="include/checkbox/standards/fn.xml" />
    <include system_xml_path="include/checkbox/standards/forward_delete.xml" />
    <include system_xml_path="include/checkbox/standards/function.xml" />
    <include system_xml_path="include/checkbox/standards/help.xml" />
    <include system_xml_path="include/checkbox/standards/keypad.xml" />
    <include system_xml_path="include/checkbox/standards/minus.xml" />
    <include system_xml_path="include/checkbox/standards/number.xml" />
    <include system_xml_path="include/checkbox/standards/option.xml" />
    <include system_xml_path="include/checkbox/standards/pageup_pagedown.xml" />
    <include system_xml_path="include/checkbox/standards/return.xml" />
    <include system_xml_path="include/checkbox/standards/quote.xml" />
    <include system_xml_path="include/checkbox/standards/semicolon.xml" />
    <include system_xml_path="include/checkbox/standards/shift.xml" />
    <include system_xml_path="include/checkbox/standards/slash.xml" />
    <include system_xml_path="include/checkbox/standards/space.xml" />
    <include system_xml_path="include/checkbox/standards/tab.xml" />

    <include system_xml_path="include/checkbox/custom_shortcuts.xml" />
    <include system_xml_path="include/checkbox/diamond_cursor.xml" />
    <include system_xml_path="include/checkbox/browsing_mode.xml" />
    <include system_xml_path="include/checkbox/emacs_mode.xml" />
    <include system_xml_path="include/checkbox/mouse_keys.xml" />
    <include system_xml_path="include/checkbox/vi_mode.xml" />
    <include system_xml_path="include/checkbox/ubiquitous_vim_bindings.xml" />
    <include system_xml_path="include/checkbox/complete_vi_mode.xml" />
    <include system_xml_path="include/checkbox/simultaneouskeypresses_vi_mode.xml" />
    <include system_xml_path="include/checkbox/homerow_mode.xml" />
    <include system_xml_path="include/checkbox/simultaneouskeypresses.xml" />
    <include system_xml_path="include/checkbox/thumbsense.xml" />
    <include system_xml_path="include/checkbox/for_mission_control.xml" />

    <item>
      <name>For Applications</name>
      <list>
        <include system_xml_path="include/checkbox/apps/virtual_machine.xml" />
        <include system_xml_path="include/checkbox/apps/finder.xml" />
        <include system_xml_path="include/checkbox/apps/terminal.xml" />
        <include system_xml_path="include/checkbox/apps/adobe.xml" />
        <include system_xml_path="include/checkbox/apps/safari.xml" />
        <include system_xml_path="include/checkbox/apps/firefox.xml" />
        <include system_xml_path="include/checkbox/apps/office.xml" />
        <include system_xml_path="include/checkbox/apps/macsoup.xml" />
        <include system_xml_path="include/checkbox/apps/vienna.xml" />
        <include system_xml_path="include/checkbox/apps/gruml.xml" />
        <include system_xml_path="include/checkbox/apps/launchbar.xml" />
        <item>
          <name>Enable at only Remote Desktop Connection Client</name>
          <list>
            <item>
              <name>Command+Tab to Option+Tab</name>
              <appendix>(only in RDC)</appendix>
              <identifier>remap.app_rdc_commandTab2optionTab</identifier>
              <only>REMOTEDESKTOPCONNECTION</only>
              <autogen>--KeyToKey-- KeyCode::TAB, VK_COMMAND, KeyCode::TAB, ModifierFlag::OPTION_L</autogen>
            </item>
            <item>
              <name>Command+XCVSZWF to Ctrl+XCVSZWF</name>
              <appendix>(only in RDC)</appendix>
              <identifier>remap.app_rdc_commandXCVSZWF2controlXCVSZWF</identifier>
              <only>REMOTEDESKTOPCONNECTION</only>
              <autogen>--KeyToKey-- KeyCode::X, VK_COMMAND, KeyCode::X, ModifierFlag::CONTROL_L</autogen>
              <autogen>--KeyToKey-- KeyCode::C, VK_COMMAND, KeyCode::C, ModifierFlag::CONTROL_L</autogen>
              <autogen>--KeyToKey-- KeyCode::V, VK_COMMAND, KeyCode::V, ModifierFlag::CONTROL_L</autogen>
              <autogen>--KeyToKey-- KeyCode::S, VK_COMMAND, KeyCode::S, ModifierFlag::CONTROL_L</autogen>
              <autogen>--KeyToKey-- KeyCode::Z, VK_COMMAND, KeyCode::Z, ModifierFlag::CONTROL_L</autogen>
              <autogen>--KeyToKey-- KeyCode::Y, VK_COMMAND, KeyCode::Y, ModifierFlag::CONTROL_L</autogen>
              <autogen>--KeyToKey-- KeyCode::W, VK_COMMAND, KeyCode::W, ModifierFlag::CONTROL_L</autogen>
              <autogen>--KeyToKey-- KeyCode::F, VK_COMMAND, KeyCode::F, ModifierFlag::CONTROL_L</autogen>
            </item>
            <item>
              <name>Command+SPACE to Ctrl+SPACE</name>
              <appendix>(only in RDC)</appendix>
              <identifier>remap.app_rdc_commandSpace2controlSpace</identifier>
              <only>REMOTEDESKTOPCONNECTION</only>
              <autogen>--KeyToKey-- KeyCode::SPACE, VK_COMMAND, KeyCode::SPACE, ModifierFlag::CONTROL_L</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Enable at only World of Warcraft</name>
          <list>
            <item>
              <name>Swap Command and Option for Alt Bindings</name>
              <appendix>Command_L to Option_L</appendix>
              <appendix>Option_L to Command_L</appendix>
              <identifier>remap.app_world_of_warcraft_option_command_swap</identifier>
              <block>
                <only>WORLD_OF_WARCRAFT</only>
                <autogen>--KeyToKey-- KeyCode::COMMAND_L, KeyCode::OPTION_L</autogen>
                <autogen>--KeyToKey-- KeyCode::OPTION_L, KeyCode::COMMAND_L</autogen>
              </block>
            </item>
          </list>
        </item>
        <item>
          <name>Enable at only StarCraft II</name>
          <list>
            <item>
              <name>Swap Space and Shift_L</name>
              <only>STARCRAFT2</only>
              <identifier>remap.app_starcraft2_swap_SPACE_SHIFT_L</identifier>
              <autogen>--KeyToKey-- KeyCode::SHIFT_L, KeyCode::SPACE</autogen>
              <autogen>--KeyToKey-- KeyCode::SPACE, KeyCode::SHIFT_L</autogen>
            </item>
            <item>
              <name>Swap Command_L and Control_L</name>
              <only>STARCRAFT2</only>
              <identifier>remap.app_starcraft2_COMMAND_L_CONTROL_L</identifier>
              <autogen>--KeyToKey-- KeyCode::COMMAND_L, KeyCode::CONTROL_L</autogen>
              <autogen>--KeyToKey-- KeyCode::CONTROL_L, KeyCode::COMMAND_L</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Enable at only Skype</name>
          <list>
            <item>
              <name>Prevent accidental close of chat windows</name>
              <appendix>(Ignore Command+W and require Command+Shift+W to send Command+W)</appendix>
              <identifier>remap.app_skype_command_shift_w_to_close</identifier>
              <only>SKYPE</only>
              <autogen>--KeyToKey-- KeyCode::W, VK_COMMAND | VK_SHIFT, KeyCode::W, VK_COMMAND</autogen>
              <autogen>--KeyToKey-- KeyCode::W, VK_COMMAND | ModifierFlag::NONE, KeyCode::VK_NONE</autogen>
            </item>
            <item>
              <name>Hold Command+W to Close Conversation</name>
              <appendix>(You can adjust the threshold time of holding by</appendix>
              <appendix>"[Holding Key to Key] Holding Threshold" in Key Repeat tab.)</appendix>
              <only>SKYPE</only>
              <identifier>remap.app_skype_holdcommandW</identifier>
              <autogen>--HoldingKeyToKey-- KeyCode::W, VK_COMMAND | ModifierFlag::NONE, KeyCode::VK_NONE, KeyCode::W, VK_COMMAND, Option::NOREPEAT</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Enable at only Dictionary</name>
          <list>
            <item>
              <name>Do not let Dictionary.app quit on Command+W</name>
              <identifier>remap.app_dictionary_command_w_to_unfocus</identifier>
              <only>DICTIONARY</only>
              <autogen>--KeyToKey-- KeyCode::W, VK_COMMAND | ModifierFlag::NONE, KeyCode::TAB, VK_COMMAND, KeyCode::RETURN, Option::NOREPEAT</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Enable at only TweetDeck</name>
          <list>
            <item>
              <name>Emacs bindings for TweetDeck</name>
              <identifier>remap.app_tweetdeck_emacs_bindings</identifier>
              <only>TWEETDECK</only>
              <autogen>--KeyToKey-- KeyCode::F, VK_CONTROL, KeyCode::CURSOR_RIGHT</autogen>
              <autogen>--KeyToKey-- KeyCode::B, VK_CONTROL, KeyCode::CURSOR_LEFT</autogen>
              <autogen>--KeyToKey-- KeyCode::N, VK_CONTROL, KeyCode::CURSOR_DOWN</autogen>
              <autogen>--KeyToKey-- KeyCode::P, VK_CONTROL, KeyCode::CURSOR_UP</autogen>
              <autogen>--KeyToKey-- KeyCode::A, VK_CONTROL, KeyCode::HOME</autogen>
              <autogen>--KeyToKey-- KeyCode::E, VK_CONTROL, KeyCode::END</autogen>
              <autogen>--KeyToKey-- KeyCode::D, VK_CONTROL, KeyCode::FORWARD_DELETE</autogen>
              <autogen>--KeyToKey-- KeyCode::H, VK_CONTROL, KeyCode::DELETE</autogen>
              <autogen>--KeyToKey-- KeyCode::K, VK_CONTROL, KeyCode::CURSOR_RIGHT, ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_L, KeyCode::FORWARD_DELETE</autogen>
              <autogen>--KeyToKey-- KeyCode::J, VK_CONTROL, KeyCode::ENTER</autogen>
              <autogen>--KeyToKey-- KeyCode::M, VK_CONTROL, KeyCode::RETURN</autogen>
              <autogen>--KeyToKey-- KeyCode::Y, VK_CONTROL, KeyCode::V, ModifierFlag::COMMAND_L</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Quicksilver Mode</name>
          <list>
            <item>
              <name>What's Quicksilver Mode?</name>
              <appendix>This mode is designed for Quicksilver.app.</appendix>
              <appendix>- Control+M to Return (&amp; exit mode)</appendix>
              <appendix>- Control+I to Tab</appendix>
              <appendix>- Control+[ to Escape (&amp; exit mode)</appendix>
              <appendix>- Escape to Escape (&amp; exit mode)</appendix>
              <appendix>- Return to Return (&amp; exit mode)</appendix>
              <appendix></appendix>
              <identifier vk_config="true">notsave.quicksilver_mode</identifier>
              <autogen>--ShowStatusMessage-- Quicksilver</autogen>
              <autogen>--KeyToKey-- KeyCode::M,            VK_CONTROL, KeyCode::RETURN, KeyCode::VK_CONFIG_FORCE_OFF_notsave_quicksilver_mode</autogen>
              <autogen>--KeyToKey-- KeyCode::I,            VK_CONTROL, KeyCode::TAB</autogen>
              <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, VK_CONTROL, KeyCode::ESCAPE, KeyCode::VK_CONFIG_FORCE_OFF_notsave_quicksilver_mode</autogen>
              <autogen>--KeyToKey-- KeyCode::ESCAPE,                   KeyCode::ESCAPE, KeyCode::VK_CONFIG_FORCE_OFF_notsave_quicksilver_mode</autogen>
              <autogen>--KeyToKey-- KeyCode::RETURN,                   KeyCode::RETURN, KeyCode::VK_CONFIG_FORCE_OFF_notsave_quicksilver_mode</autogen>
              <block>
                <config_only>remap.doublecommand_to_quicksilver_mode</config_only>
                <autogen>--DoublePressModifier-- KeyCode::COMMAND_L, KeyCode::COMMAND_L, KeyCode::VK_CONFIG_FORCE_OFF_notsave_quicksilver_mode</autogen>
                <autogen>--DoublePressModifier-- KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::VK_CONFIG_FORCE_OFF_notsave_quicksilver_mode</autogen>
              </block>
              <block>
                <config_only>remap.doublecontrol_to_quicksilver_mode</config_only>
                <autogen>--DoublePressModifier-- KeyCode::CONTROL_L, KeyCode::CONTROL_L, KeyCode::VK_CONFIG_FORCE_OFF_notsave_quicksilver_mode</autogen>
                <autogen>--DoublePressModifier-- KeyCode::CONTROL_R, KeyCode::CONTROL_R, KeyCode::VK_CONFIG_FORCE_OFF_notsave_quicksilver_mode</autogen>
              </block>
              <block>
                <config_only>remap.commandspace_to_quicksilver_mode</config_only>
                <autogen>--KeyToKey-- KeyCode::SPACE, VK_COMMAND | ModifierFlag::NONE, KeyCode::SPACE, VK_COMMAND, KeyCode::VK_CONFIG_FORCE_OFF_notsave_quicksilver_mode</autogen>
              </block>
            </item>
            <item>
              <name>Double Command to Quicksilver Mode</name>
              <include system_xml_path="include/checkbox/snippets/quicksilver_mode_doublepressmodifier_appendix.xml" />
              <identifier>remap.doublecommand_to_quicksilver_mode</identifier>
              <autogen>--DoublePressModifier-- KeyCode::COMMAND_L, KeyCode::COMMAND_L, KeyCode::VK_CONFIG_FORCE_ON_notsave_quicksilver_mode</autogen>
              <autogen>--DoublePressModifier-- KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::VK_CONFIG_FORCE_ON_notsave_quicksilver_mode</autogen>
            </item>
            <item>
              <name>Double Control to Quicksilver Mode</name>
              <include system_xml_path="include/checkbox/snippets/quicksilver_mode_doublepressmodifier_appendix.xml" />
              <identifier>remap.doublecontrol_to_quicksilver_mode</identifier>
              <autogen>--DoublePressModifier-- KeyCode::CONTROL_L, KeyCode::CONTROL_L, KeyCode::VK_CONFIG_FORCE_ON_notsave_quicksilver_mode</autogen>
              <autogen>--DoublePressModifier-- KeyCode::CONTROL_R, KeyCode::CONTROL_R, KeyCode::VK_CONFIG_FORCE_ON_notsave_quicksilver_mode</autogen>
            </item>
            <item>
              <name>Command+Space to Quicksilver Mode</name>
              <identifier>remap.commandspace_to_quicksilver_mode</identifier>
              <autogen>--KeyToKey-- KeyCode::SPACE, VK_COMMAND | ModifierFlag::NONE, KeyCode::SPACE, VK_COMMAND, KeyCode::VK_CONFIG_FORCE_ON_notsave_quicksilver_mode</autogen>
            </item>
          </list>
        </item>
      </list>
    </item>

    <item>
      <name>Change Keyboard Layout</name>
      <list>
        <item>
          <name>Use Colemak Keyboard Layout</name>
          <identifier>remap.qwerty2colemak</identifier>
          <include system_xml_path="include/checkbox/snippets/keypad_redefinition.xml" />
          <autogen>--KeyToKey-- KeyCode::E, KeyCode::F</autogen>
          <autogen>--KeyToKey-- KeyCode::R, KeyCode::P</autogen>
          <autogen>--KeyToKey-- KeyCode::T, KeyCode::G</autogen>
          <autogen>--KeyToKey-- KeyCode::Y, KeyCode::J</autogen>
          <autogen>--KeyToKey-- KeyCode::U, KeyCode::L</autogen>
          <autogen>--KeyToKey-- KeyCode::I, KeyCode::U</autogen>
          <autogen>--KeyToKey-- KeyCode::O, KeyCode::Y</autogen>
          <autogen>--KeyToKey-- KeyCode::P, KeyCode::SEMICOLON</autogen>
          <autogen>--KeyToKey-- KeyCode::S, KeyCode::R</autogen>
          <autogen>--KeyToKey-- KeyCode::D, KeyCode::S</autogen>
          <autogen>--KeyToKey-- KeyCode::F, KeyCode::T</autogen>
          <autogen>--KeyToKey-- KeyCode::G, KeyCode::D</autogen>
          <autogen>--KeyToKey-- KeyCode::J, KeyCode::N</autogen>
          <autogen>--KeyToKey-- KeyCode::K, KeyCode::E</autogen>
          <autogen>--KeyToKey-- KeyCode::L, KeyCode::I</autogen>
          <autogen>--KeyToKey-- KeyCode::SEMICOLON, KeyCode::O</autogen>
          <autogen>--KeyToKey-- KeyCode::N, KeyCode::K</autogen>
        </item>
        <item>
          <name>Use QWERF Keyboard Layout</name>
          <identifier>remap.qwerty2qwerf</identifier>
          <include system_xml_path="include/checkbox/snippets/keypad_redefinition.xml" />
          <autogen>--KeyToKey-- KeyCode::T, KeyCode::F</autogen>
          <autogen>--KeyToKey-- KeyCode::Y, KeyCode::J</autogen>
          <autogen>--KeyToKey-- KeyCode::U, KeyCode::Y</autogen>
          <autogen>--KeyToKey-- KeyCode::I, KeyCode::K</autogen>
          <autogen>--KeyToKey-- KeyCode::O, KeyCode::L</autogen>
          <autogen>--KeyToKey-- KeyCode::P, KeyCode::SEMICOLON</autogen>
          <autogen>--KeyToKey-- KeyCode::F, KeyCode::T</autogen>
          <autogen>--KeyToKey-- KeyCode::J, KeyCode::U</autogen>
          <autogen>--KeyToKey-- KeyCode::K, KeyCode::I</autogen>
          <autogen>--KeyToKey-- KeyCode::L, KeyCode::O</autogen>
          <autogen>--KeyToKey-- KeyCode::SEMICOLON, KeyCode::P</autogen>
        </item>
        <item>
          <name>Use Workman Keyboard Layout</name>
          <identifier>remap.qwerty2workman</identifier>
          <include system_xml_path="include/checkbox/snippets/keypad_redefinition.xml" />
          <autogen>--KeyToKey-- KeyCode::W, KeyCode::D</autogen>
          <autogen>--KeyToKey-- KeyCode::E, KeyCode::R</autogen>
          <autogen>--KeyToKey-- KeyCode::R, KeyCode::W</autogen>
          <autogen>--KeyToKey-- KeyCode::T, KeyCode::B</autogen>
          <autogen>--KeyToKey-- KeyCode::Y, KeyCode::J</autogen>
          <autogen>--KeyToKey-- KeyCode::U, KeyCode::F</autogen>
          <autogen>--KeyToKey-- KeyCode::I, KeyCode::U</autogen>
          <autogen>--KeyToKey-- KeyCode::O, KeyCode::P</autogen>
          <autogen>--KeyToKey-- KeyCode::P, KeyCode::SEMICOLON</autogen>
          <autogen>--KeyToKey-- KeyCode::D, KeyCode::H</autogen>
          <autogen>--KeyToKey-- KeyCode::F, KeyCode::T</autogen>
          <autogen>--KeyToKey-- KeyCode::H, KeyCode::Y</autogen>
          <autogen>--KeyToKey-- KeyCode::J, KeyCode::N</autogen>
          <autogen>--KeyToKey-- KeyCode::K, KeyCode::E</autogen>
          <autogen>--KeyToKey-- KeyCode::L, KeyCode::O</autogen>
          <autogen>--KeyToKey-- KeyCode::SEMICOLON, KeyCode::I</autogen>
          <autogen>--KeyToKey-- KeyCode::C, KeyCode::M</autogen>
          <autogen>--KeyToKey-- KeyCode::V, KeyCode::C</autogen>
          <autogen>--KeyToKey-- KeyCode::B, KeyCode::V</autogen>
          <autogen>--KeyToKey-- KeyCode::N, KeyCode::K</autogen>
          <autogen>--KeyToKey-- KeyCode::M, KeyCode::L</autogen>
        </item>
        <item>
          <name>Use ABCDEF Keyboard Layout</name>
          <appendix>qwertyuiop &#8594; abcdefghij</appendix>
          <appendix>asdfghjkl &#8594; klmnopqrs</appendix>
          <appendix>zxcvbnm &#8594; tuvwxyz</appendix>
          <identifier>remap.qwerty2abcdef</identifier>
          <include system_xml_path="include/checkbox/snippets/keypad_redefinition.xml" />
          <autogen>--KeyToKey-- KeyCode::Q, KeyCode::A</autogen>
          <autogen>--KeyToKey-- KeyCode::W, KeyCode::B</autogen>
          <autogen>--KeyToKey-- KeyCode::E, KeyCode::C</autogen>
          <autogen>--KeyToKey-- KeyCode::R, KeyCode::D</autogen>
          <autogen>--KeyToKey-- KeyCode::T, KeyCode::E</autogen>
          <autogen>--KeyToKey-- KeyCode::Y, KeyCode::F</autogen>
          <autogen>--KeyToKey-- KeyCode::U, KeyCode::G</autogen>
          <autogen>--KeyToKey-- KeyCode::I, KeyCode::H</autogen>
          <autogen>--KeyToKey-- KeyCode::O, KeyCode::I</autogen>
          <autogen>--KeyToKey-- KeyCode::P, KeyCode::J</autogen>

          <autogen>--KeyToKey-- KeyCode::A, KeyCode::K</autogen>
          <autogen>--KeyToKey-- KeyCode::S, KeyCode::L</autogen>
          <autogen>--KeyToKey-- KeyCode::D, KeyCode::M</autogen>
          <autogen>--KeyToKey-- KeyCode::F, KeyCode::N</autogen>
          <autogen>--KeyToKey-- KeyCode::G, KeyCode::O</autogen>
          <autogen>--KeyToKey-- KeyCode::H, KeyCode::P</autogen>
          <autogen>--KeyToKey-- KeyCode::J, KeyCode::Q</autogen>
          <autogen>--KeyToKey-- KeyCode::K, KeyCode::R</autogen>
          <autogen>--KeyToKey-- KeyCode::L, KeyCode::S</autogen>

          <autogen>--KeyToKey-- KeyCode::Z, KeyCode::T</autogen>
          <autogen>--KeyToKey-- KeyCode::X, KeyCode::U</autogen>
          <autogen>--KeyToKey-- KeyCode::C, KeyCode::V</autogen>
          <autogen>--KeyToKey-- KeyCode::V, KeyCode::W</autogen>
          <autogen>--KeyToKey-- KeyCode::B, KeyCode::X</autogen>
          <autogen>--KeyToKey-- KeyCode::N, KeyCode::Y</autogen>
          <autogen>--KeyToKey-- KeyCode::M, KeyCode::Z</autogen>
        </item>
        <item>
          <name>Use US Keyboard Layout</name>
          <identifier>remap.layout2us</identifier>
          <autogen>--SetKeyboardType-- KeyboardType::MACBOOK</autogen>
        </item>
      </list>
    </item>

    <item>
      <name>For PC Users</name>
      <list>
        <item>
          <name>Change PC Application Key</name>
          <list>
            <item>
              <name>Application Key to CapsLock</name>
              <identifier>remap.pc_application2capslock</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::CAPSLOCK</autogen>
            </item>
            <item>
              <name>Application Key to Command_L</name>
              <identifier>remap.pc_application2commandL</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::COMMAND_L</autogen>
            </item>
            <item>
              <name>Application Key to Command_L</name>
              <appendix>(+ Application Key to Control_L in Terminal, Screen Sharing, MacVim,</appendix>
              <appendix>RDC, Emacs, X11, VNC)</appendix>
              <identifier>remap.pc_application2commandL_controlL</identifier>
              <block>
                <only>TERMINAL,SCREEN_SHARING, VI, REMOTEDESKTOPCONNECTION, EMACS, X11, VNC</only>
                <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::CONTROL_L</autogen>
              </block>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::COMMAND_L</autogen>
            </item>
            <item>
              <name>Application Key to Command_R</name>
              <identifier>remap.pc_application2commandR_comamndLspace</identifier>
              <appendix>(+ When you type Application only, send Command_L+Space)</appendix>
              <autogen>--KeyOverlaidModifier-- KeyCode::PC_APPLICATION, KeyCode::COMMAND_R, KeyCode::SPACE, ModifierFlag::COMMAND_L</autogen>
            </item>
            <item>
              <name>Application Key to Control_L</name>
              <identifier>remap.pc_application2controlL</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::CONTROL_L</autogen>
            </item>
            <item>
              <name>Application Key to Control_L</name>
              <appendix>(+ When you type Application Key only, send CapsLock)</appendix>
              <!-- Note: identifier has "jis_" prefix for compatibility. -->
              <identifier>remap.jis_pc_application2controlL_capslock</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::PC_APPLICATION, KeyCode::CONTROL_L, KeyCode::CAPSLOCK</autogen>
            </item>
            <item>
              <name>Application Key to Fn</name>
              <identifier>remap.pc_application2fn</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::FN</autogen>
            </item>
            <item>
              <name>Application Key to Fn</name>
              <appendix>(+ When you type Application only, send Fn_Lock)</appendix>
              <identifier>remap.pc_application2fn_fnlock</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::PC_APPLICATION, KeyCode::FN, KeyCode::VK_LOCK_FN</autogen>
            </item>
            <item>
              <name>Application Key to Option_L</name>
              <identifier>remap.pc_application2optionL</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::OPTION_L</autogen>
            </item>
            <item>
              <name>Application Key to Shift_L</name>
              <identifier>remap.pc_application2shiftL</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::SHIFT_L</autogen>
            </item>
            <item>
              <name>Application Key to Command_L+Backquote</name>
              <identifier>remap.pc_application2commandLbackquote</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::BACKQUOTE, ModifierFlag::COMMAND_L</autogen>
            </item>
            <item>
              <name>Application Key to Delete</name>
              <identifier>remap.pc_application2delete</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::DELETE</autogen>
            </item>
            <item>
              <name>Application Key to Delete</name>
              <appendix>(+ Command+Application Key to CapsLock)</appendix>
              <identifier>remap.pc_application2delete_capslock</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, VK_COMMAND, KeyCode::CAPSLOCK</autogen>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::DELETE</autogen>
            </item>
            <item>
              <name>Application Key to Escape</name>
              <identifier>remap.pc_application2escape</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::ESCAPE</autogen>
            </item>
            <item>
              <name>Application Key to Escape</name>
              <appendix>(+ Shift+Application Key to CapsLock)</appendix>
              <identifier>remap.pc_application2escape_capslock</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, VK_SHIFT, KeyCode::CAPSLOCK</autogen>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::ESCAPE</autogen>
            </item>
            <item>
              <name>Application Key to Eject</name>
              <identifier>remap.pc_application2eject</identifier>
              <autogen>--KeyToConsumer-- KeyCode::PC_APPLICATION, ConsumerKeyCode::EJECT</autogen>
            </item>
            <item>
              <name>Application Key to Expose All</name>
              <identifier>remap.pc_application2exposeALL</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::EXPOSE_ALL</autogen>
            </item>
            <item>
              <name>Application Key to F9</name>
              <identifier>remap.pc_application2f9</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::F9</autogen>
            </item>
            <item>
              <name>Application Key to F11</name>
              <identifier>remap.pc_application2f11</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::F11</autogen>
            </item>
            <item>
              <name>Application Key to Command_L+Space</name>
              <identifier>remap.pc_application2commandLspace</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::SPACE, ModifierFlag::COMMAND_L</autogen>
            </item>
            <item>
              <name>Application Key to Option_L+Space</name>
              <identifier>remap.pc_application2optionLspace</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::SPACE, ModifierFlag::OPTION_L</autogen>
            </item>
            <item>
              <name>Application Key to Underscore(Shift_L+Minus)</name>
              <identifier>remap.pc_application2underscore</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::MINUS, ModifierFlag::SHIFT_L</autogen>
            </item>
            <item>
              <name>Application Key to LeftClick</name>
              <identifier>remap.pc_application2leftclick</identifier>
              <autogen>--KeyToPointingButton-- KeyCode::PC_APPLICATION, PointingButton::LEFT</autogen>
            </item>
            <item>
              <name>Application Key to RightClick</name>
              <identifier>remap.pc_application2rightclick</identifier>
              <autogen>--KeyToPointingButton-- KeyCode::PC_APPLICATION, PointingButton::RIGHT</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Change PC Insert Key</name>
          <list>
            <item>
              <name>Insert Key to Control_R</name>
              <identifier>remap.pc_insert2controlR</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_INSERT, KeyCode::CONTROL_R</autogen>
            </item>
            <item>
              <name>Insert Key to Option_L+Insert</name>
              <identifier>remap.pc_insert2optionLinsert</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_INSERT, KeyCode::PC_INSERT, ModifierFlag::OPTION_L</autogen>
            </item>
            <item>
              <name>Insert Key to PageDown</name>
              <identifier>remap.pc_insert2pagedown</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_INSERT, KeyCode::PAGEDOWN</autogen>
            </item>
            <item>
              <name>Insert Key to Tab</name>
              <identifier>remap.pc_insert2tab</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_INSERT, KeyCode::TAB</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Change PC NumLock Key</name>
          <list>
            <item>
              <name>NumLock Key to F11</name>
              <identifier>remap.pc_numlock2f11</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_KEYPAD_NUMLOCK, KeyCode::F11</autogen>
            </item>
            <item>
              <name>Disable NumLock Key</name>
              <identifier>remap.drop_numlock</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_KEYPAD_NUMLOCK, KeyCode::VK_NONE</autogen>
            </item>
            <item>
              <name>Disable NumLock Key (except in TeamViewer.app)</name>
              <not>TEAMVIEWER</not>
              <identifier>remap.drop_numlock_ex_teamviewer</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_KEYPAD_NUMLOCK, KeyCode::VK_NONE</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Change PC PrintScreen Key, ScrollLock Key, Pause/Break Key</name>
          <list>
            <item>
              <name>Right-hand function key block to system volume controls</name>
              <appendix>* PrintScreen to Volume Down</appendix>
              <appendix>* ScrollLock to Volume Up</appendix>
              <appendix>* Pause/Break to Volume Mute</appendix>
              <identifier>remap.pc_printscreen_scrolllock_pause_to_volume_controls</identifier>
              <autogen>--KeyToConsumer-- KeyCode::PC_PRINTSCREEN, ConsumerKeyCode::VOLUME_DOWN</autogen>
              <autogen>--KeyToConsumer-- KeyCode::PC_SCROLLLOCK,  ConsumerKeyCode::VOLUME_UP</autogen>
              <autogen>--KeyToConsumer-- KeyCode::PC_PAUSE,       ConsumerKeyCode::VOLUME_MUTE</autogen>
            </item>
            <item>
              <name>PrintScreen Key to Eject</name>
              <identifier>remap.pc_printscreen2eject</identifier>
              <autogen>--KeyToConsumer-- KeyCode::PC_PRINTSCREEN, ConsumerKeyCode::EJECT</autogen>
            </item>
            <item>
              <name>PrintScreen Key to F12</name>
              <identifier>remap.pc_printscreen2f12</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_PRINTSCREEN, KeyCode::F12</autogen>
            </item>
            <item>
              <name>ScrollLock Key to F13</name>
              <identifier>remap.pc_scrolllock2f13</identifier>
              <autogen>--KeyToKey-- KeyCode::PC_SCROLLLOCK, KeyCode::F13</autogen>
            </item>
            <item>
              <name>Pause/Break Key to Eject</name>
              <identifier>remap.pc_pause2eject</identifier>
              <autogen>--KeyToConsumer-- KeyCode::PC_PAUSE, ConsumerKeyCode::EJECT</autogen>
            </item>
            <item>
              <name>Pause/Break Key to Power</name>
              <identifier>remap.pc_pause2power</identifier>
              <autogen>--KeyToConsumer-- KeyCode::PC_PAUSE, ConsumerKeyCode::POWER</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Use KeyPad as Arrow (PC Style NumLock)</name>
          <list>
            <item>
              <name>Enable KeyPad as Arrow</name>
              <appendix>(except virtual machine, RDC)</appendix>
              <identifier vk_config="true">remap.keypadnumlock</identifier>
              <block>
                <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
                <include system_xml_path="include/checkbox/snippets/keypadnumlock.xml" />
              </block>
              <block>
                <config_only>option.keypadnumlock_vm</config_only>
                <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
                <include system_xml_path="include/checkbox/snippets/keypadnumlock.xml" />
              </block>
            </item>
            <item>
              <name>Use Clear Key to toggle "KeyPad as Arrow"</name>
              <appendix>(except virtual machine, RDC)</appendix>
              <identifier>option.keypadnumlock_togglekey_clear</identifier>
              <block>
                <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
                <autogen>--KeyToKey-- KeyCode::KEYPAD_CLEAR, KeyCode::VK_CONFIG_TOGGLE_remap_keypadnumlock</autogen>
              </block>
              <block>
                <config_only>option.keypadnumlock_vm</config_only>
                <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
                <autogen>--KeyToKey-- KeyCode::KEYPAD_CLEAR, KeyCode::VK_CONFIG_TOGGLE_remap_keypadnumlock</autogen>
              </block>
            </item>
            <item>
              <name>Enable KeyPad as Arrow</name>
              <appendix>(With PC Style Home/End/PageUp/PageDown)</appendix>
              <appendix>(- KeyPad_7 to Command_L+Left-Arrow)</appendix>
              <appendix>(- KeyPad_1 to Command_L+Right-Arrow)</appendix>
              <appendix>(- KeyPad_9 to Option_L+PageUp)</appendix>
              <appendix>(- KeyPad_3 to Option_L+PageDown)</appendix>
              <appendix>(except virtual machine, RDC)</appendix>
              <identifier vk_config="true">remap.keypadnumlock_pclikehomeend</identifier>
              <block>
                <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
                <include system_xml_path="include/checkbox/snippets/keypadnumlock_pclikehomeend.xml" />
              </block>
              <block>
                <config_only>option.keypadnumlock_vm</config_only>
                <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
                <!-- We use normal Home/End/PageUp/PageDown in VM -->
                <include system_xml_path="include/checkbox/snippets/keypadnumlock.xml" />
              </block>
            </item>
            <item>
              <name>Use Clear Key to toggle "KeyPad as Arrow (PC Style Home/End/PageUp/PageDown)"</name>
              <appendix>(except virtual machine, RDC)</appendix>
              <identifier>option.keypadnumlock_pclikehomeend_togglekey_clear</identifier>
              <block>
                <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
                <autogen>--KeyToKey-- KeyCode::KEYPAD_CLEAR, KeyCode::VK_CONFIG_TOGGLE_remap_keypadnumlock_pclikehomeend</autogen>
              </block>
              <block>
                <config_only>option.keypadnumlock_vm</config_only>
                <only>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</only>
                <autogen>--KeyToKey-- KeyCode::KEYPAD_CLEAR, KeyCode::VK_CONFIG_TOGGLE_remap_keypadnumlock_pclikehomeend</autogen>
              </block>
            </item>
            <item>
              <name>[Option] Use "KeyPad as Arrow" in virtual machine, RDC</name>
              <identifier>option.keypadnumlock_vm</identifier>
            </item>
          </list>
        </item>
        <item>
          <name>Use PC Style KeyPad Layout on Apple KeyPad</name>
          <appendix>(Change = to /)</appendix>
          <appendix>(Change / to *)</appendix>
          <appendix>(Change * to -)</appendix>
          <appendix>(Change - to +)</appendix>
          <appendix>(Change + to =)</appendix>
          <identifier>remap.pc_style_keypad</identifier>
          <autogen>--KeyToKey-- KeyCode::KEYPAD_EQUAL,    KeyCode::KEYPAD_SLASH</autogen>
          <autogen>--KeyToKey-- KeyCode::KEYPAD_SLASH,    KeyCode::KEYPAD_MULTIPLY</autogen>
          <autogen>--KeyToKey-- KeyCode::KEYPAD_MULTIPLY, KeyCode::KEYPAD_MINUS</autogen>
          <autogen>--KeyToKey-- KeyCode::KEYPAD_MINUS,    KeyCode::KEYPAD_PLUS</autogen>
          <autogen>--KeyToKey-- KeyCode::KEYPAD_PLUS,     KeyCode::KEYPAD_EQUAL</autogen>
        </item>
        <item>
          <name>Use PC Style Home/End (except in Virtual Machine,RDC)</name>
          <appendix>(Change Home to Control+A)</appendix>
          <appendix>(Change End to Control+E)</appendix>
          <identifier>remap.pclikehomeend_emacs</identifier>
          <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
          <include system_xml_path="include/checkbox/snippets/pcstyle_homeend_ignore_apps.xml" />
          <autogen>--KeyToKey-- FROMKEYCODE_HOME, VK_COMMAND, KeyCode::CURSOR_UP,    ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- FROMKEYCODE_HOME, VK_CONTROL, KeyCode::CURSOR_UP,    ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- FROMKEYCODE_END,  VK_COMMAND, KeyCode::CURSOR_DOWN,  ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- FROMKEYCODE_END,  VK_CONTROL, KeyCode::CURSOR_DOWN,  ModifierFlag::COMMAND_L</autogen>
          <block>
            <!-- Control+Shift+A/E do not work in springpadit.com. -->
            <!-- Therefore we need to change Shift+Home/End to Command+Shift+Left/Right. -->
            <only>SAFARI,FIREFOX,THUNDERBIRD,GOOGLE_CHROME,OPERA</only>
            <autogen>--KeyToKey-- FROMKEYCODE_HOME, VK_SHIFT | ModifierFlag::NONE,
              KeyCode::CURSOR_LEFT,   ModifierFlag::COMMAND_L | VK_SHIFT</autogen>
            <autogen>--KeyToKey-- FROMKEYCODE_END,  VK_SHIFT | ModifierFlag::NONE,
              KeyCode::CURSOR_RIGHT,  ModifierFlag::COMMAND_L | VK_SHIFT</autogen>
          </block>
          <autogen>--KeyToKey-- FROMKEYCODE_HOME,             KeyCode::A, ModifierFlag::CONTROL_L</autogen>
          <autogen>--KeyToKey-- FROMKEYCODE_END,              KeyCode::E, ModifierFlag::CONTROL_L</autogen>
        </item>
        <item>
          <name>Use PC Style Home/End (except in Virtual Machine,RDC)</name>
          <appendix>(Change Home to Command+Left)</appendix>
          <appendix>(Change End to Command+Right)</appendix>
          <appendix>(+ Change Home to Control+A in Emacs,Terminal,X11,Eclipse)</appendix>
          <appendix>(+ Change End to Control+E in Emacs,Terminal,X11,Eclipse)</appendix>
          <identifier>remap.pclikehomeend</identifier>
          <include system_xml_path="include/checkbox/snippets/pcstyle_homeend_ignore_apps.xml" />
          <block>
            <not>EMACS, TERMINAL, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
            <autogen>--KeyToKey-- FROMKEYCODE_HOME, VK_COMMAND, KeyCode::CURSOR_UP,    ModifierFlag::COMMAND_L</autogen>
            <autogen>--KeyToKey-- FROMKEYCODE_HOME, VK_CONTROL, KeyCode::CURSOR_UP,    ModifierFlag::COMMAND_L</autogen>
            <autogen>--KeyToKey-- FROMKEYCODE_END,  VK_COMMAND, KeyCode::CURSOR_DOWN,  ModifierFlag::COMMAND_L</autogen>
            <autogen>--KeyToKey-- FROMKEYCODE_END,  VK_CONTROL, KeyCode::CURSOR_DOWN,  ModifierFlag::COMMAND_L</autogen>
            <autogen>--KeyToKey-- FROMKEYCODE_HOME,             KeyCode::CURSOR_LEFT,  ModifierFlag::COMMAND_L</autogen>
            <autogen>--KeyToKey-- FROMKEYCODE_END,              KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L</autogen>
          </block>
          <block>
            <only>EMACS, TERMINAL, X11, ECLIPSE</only>
            <autogen>--KeyToKey-- FROMKEYCODE_HOME, KeyCode::A, ModifierFlag::CONTROL_L</autogen>
            <autogen>--KeyToKey-- FROMKEYCODE_END,  KeyCode::E, ModifierFlag::CONTROL_L</autogen>
          </block>
        </item>
        <item>
          <name>Use PC Style PageUp/PageDown</name>
          <appendix>(behave like Option+PageUp/PageDown)</appendix>
          <identifier>remap.pclikepageupdown</identifier>
          <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
          <autogen>--KeyToKey-- FROMKEYCODE_PAGEUP,   ModifierFlag::NONE, KeyCode::PAGEUP,   ModifierFlag::OPTION_L</autogen>
          <autogen>--KeyToKey-- FROMKEYCODE_PAGEDOWN, ModifierFlag::NONE, KeyCode::PAGEDOWN, ModifierFlag::OPTION_L</autogen>
        </item>
        <item>
          <name>Use PC Style PageUp/PageDown (except in Emacs,Virtual Machine,RDC)</name>
          <appendix>(behave like Option+PageUp/PageDown)</appendix>
          <identifier>remap.pclikepageupdown_except_emacs</identifier>
          <not>EMACS, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
          <autogen>--KeyToKey-- FROMKEYCODE_PAGEUP,   ModifierFlag::NONE, KeyCode::PAGEUP, ModifierFlag::OPTION_L</autogen>
          <autogen>--KeyToKey-- FROMKEYCODE_PAGEDOWN, ModifierFlag::NONE, KeyCode::PAGEDOWN, ModifierFlag::OPTION_L</autogen>
        </item>
        <item>
          <name>Use PC Style Control+Up/Down/Left/Right</name>
          <appendix>(Change Control+Arrow to Option+Arrow)</appendix>
          <appendix>(except in Virtual Machine,RDC)</appendix>
          <identifier>remap.pclikecontrolarrow_except_vm</identifier>
          <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
          <autogen>--KeyToKey-- KeyCode::CURSOR_UP,     VK_CONTROL, KeyCode::CURSOR_UP,    ModifierFlag::OPTION_L</autogen>
          <autogen>--KeyToKey-- KeyCode::CURSOR_DOWN,   VK_CONTROL, KeyCode::CURSOR_DOWN,  ModifierFlag::OPTION_L</autogen>
          <autogen>--KeyToKey-- KeyCode::CURSOR_LEFT,   VK_CONTROL, KeyCode::CURSOR_LEFT,  ModifierFlag::OPTION_L</autogen>
          <autogen>--KeyToKey-- KeyCode::CURSOR_RIGHT,  VK_CONTROL, KeyCode::CURSOR_RIGHT, ModifierFlag::OPTION_L</autogen>
        </item>
        <item>
          <name>Use PC Style Copy/Paste</name>
          <appendix>(Control+C to Command_L+C)</appendix>
          <appendix>(Control+V to Command_L+V)</appendix>
          <appendix>(Control+X to Command_L+X)</appendix>
          <identifier>remap.copy_paste_winstyle</identifier>
          <autogen>--KeyToKey-- KeyCode::C, VK_CONTROL, KeyCode::C, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::V, VK_CONTROL, KeyCode::V, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::X, VK_CONTROL, KeyCode::X, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style Copy/Paste</name>
          <appendix>(Control+C to Command_L+C)</appendix>
          <appendix>(Control+V to Command_L+V)</appendix>
          <appendix>(Control+X to Command_L+X)</appendix>
          <appendix>(Except in Terminal, VM, RDC, Emacs, X11, Eclipse)</appendix>
          <identifier>remap.copy_paste_winstyle_no_term</identifier>
          <not>EMACS, TERMINAL, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
          <autogen>--KeyToKey-- KeyCode::C, VK_CONTROL, KeyCode::C, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::V, VK_CONTROL, KeyCode::V, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::X, VK_CONTROL, KeyCode::X, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style Copy/Paste #2</name>
          <appendix>(Swap Control+C and Command_L+C)</appendix>
          <appendix>(Control+V to Command_L+V)</appendix>
          <appendix>(Control+X to Command_L+X)</appendix>
          <identifier>remap.copy_paste_winstyle2</identifier>
          <autogen>--KeyToKey-- KeyCode::C, VK_CONTROL, KeyCode::C, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::V, VK_CONTROL, KeyCode::V, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::X, VK_CONTROL, KeyCode::X, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::C, ModifierFlag::COMMAND_L, KeyCode::C, ModifierFlag::CONTROL_L</autogen>
        </item>
        <item>
          <name>Use PC Style Copy/Paste #3</name>
          <appendix>(Control+Insert to Command_L+C)</appendix>
          <appendix>(Shift+Insert to Command_L+V)</appendix>
          <appendix>(Shift+Delete to Command_L+X) (Note: "Delete" is Mac's Forward Delete)</appendix>
          <!-- Note: identifier name (*_2) is valid for compatibility. -->
          <identifier>remap.copy_paste_winstyle_2</identifier>
          <autogen>--KeyToKey-- KeyCode::PC_INSERT, VK_CONTROL, KeyCode::C, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::PC_INSERT, VK_SHIFT, KeyCode::V, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::FORWARD_DELETE, VK_SHIFT, KeyCode::X, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style Copy-Paste #4</name>
          <appendix>Change Command+Insert to Command+C</appendix>
          <identifier>remap.copy_paste_winstyle_4</identifier>
          <autogen>--KeyToKey-- KeyCode::PC_INSERT, VK_COMMAND, KeyCode::C, VK_COMMAND</autogen>
        </item>
        <item>
          <name>Use PC Style Undo</name>
          <appendix>(Control+Z to Command_L+Z)</appendix>
          <appendix>(Except in Terminal, VM, RDC, Emacs, X11, Eclipse)</appendix>
          <identifier>remap.undo_winstyle_no_term</identifier>
          <not>EMACS, TERMINAL, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
          <autogen>--KeyToKey-- KeyCode::Z, VK_CONTROL, KeyCode::Z, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style Select All</name>
          <appendix>(Control+A to Command_L+A)</appendix>
          <appendix>(Except in Terminal, VM, RDC, Emacs, X11, Eclipse)</appendix>
          <identifier>remap.select_all_winstyle_no_term</identifier>
          <not>EMACS, TERMINAL, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
          <autogen>--KeyToKey-- KeyCode::A, VK_CONTROL, KeyCode::A, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style Save</name>
          <appendix>(Control+S to Command_L+S)</appendix>
          <appendix>(Except in Terminal, VM, RDC, Emacs, X11, Eclipse)</appendix>
          <identifier>remap.save_winstyle_no_term</identifier>
          <not>EMACS, TERMINAL, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
          <autogen>--KeyToKey-- KeyCode::S, VK_CONTROL, KeyCode::S, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style New</name>
          <appendix>(Control+N to Command_L+N)</appendix>
          <appendix>(Except in Terminal, VM, RDC, Emacs, X11, Eclipse)</appendix>
          <identifier>remap.new_winstyle_no_term</identifier>
          <not>EMACS, TERMINAL, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
          <autogen>--KeyToKey-- KeyCode::N, VK_CONTROL, KeyCode::N, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style New Tab In Browser</name>
          <appendix>(Control+T to Command_L+T)</appendix>
          <appendix>(only in Firefox, Google Chrome, Opera, Safari)</appendix>
          <identifier>remap.copy_paste_winstyle_new_browser_tab</identifier>
          <only>FIREFOX, GOOGLE_CHROME, OPERA, SAFARI</only>
          <autogen>--KeyToKey-- KeyCode::T, VK_CONTROL, KeyCode::T, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style New Tab</name>
          <appendix>(Control+T to Command_L+T)</appendix>
          <appendix>(Except in VM, RDC, Emacs, X11, Eclipse)</appendix>
          <identifier>remap.copy_paste_winstyle_new_tab</identifier>
          <not>EMACS, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
          <autogen>--KeyToKey-- KeyCode::T, VK_CONTROL, KeyCode::T, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style Find</name>
          <appendix>(Control+F to Command_L+F)</appendix>
          <appendix>(Control+G to Command_L+G)</appendix>
          <appendix>(F3 to Command_L+G)</appendix>
          <appendix>(Control+F3 to Shift+Command_L+G)</appendix>
          <appendix>(Except in Terminal, VM, RDC, Emacs, X11, Eclipse)</appendix>
          <identifier>remap.find_winstyle_no_term</identifier>
          <not>EMACS, TERMINAL, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
          <autogen>--KeyToKey-- KeyCode::F, VK_CONTROL, KeyCode::F, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::G, VK_CONTROL, KeyCode::G, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::F3, VK_CONTROL, KeyCode::G, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L</autogen>
          <autogen>--KeyToKey-- KeyCode::F3, KeyCode::G, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style Delete-Last-Word</name>
          <name>(Control+Delete to Option+Delete)</name>
          <identifier>remap.control_delete_to_option_delete_winstyle</identifier>
          <not>VIRTUALMACHINE, REMOTEDESKTOPCONNECTION</not>
          <autogen>--KeyToKey-- KeyCode::DELETE, VK_CONTROL, KeyCode::DELETE, ModifierFlag::OPTION_L</autogen>
        </item>
        <item>
          <name>Use PC Style "Change Input Method" #1</name>
          <appendix>Flip between input modes</appendix>
          <appendix>(Option_L+Shift_L to Command+Space)</appendix>
          <appendix>If you want to use Option_L+Shift_L as modifier, press Shift_L first. (then press Option_L.)</appendix>
          <identifier>remap.pcstyle_changeinputmethod1</identifier>
          <autogen>--KeyToKey-- KeyCode::SHIFT_L, ModifierFlag::OPTION_L, KeyCode::SPACE, ModifierFlag::COMMAND_L</autogen>
        </item>
        <item>
          <name>Use PC Style "Change Input Method" #2</name>
          <appendix>Flip between input modes</appendix>
          <appendix>(Option+Shift_L to Command+Space)</appendix>
          <appendix>(Option+Shift_R to Command+Shift+Space)</appendix>
          <appendix>If you want to use Option+Shift as modifier, press Shift first. (then press Option.)</appendix>
          <identifier>remap.pcstyle_changeinputmethod2</identifier>
          <autogen>--KeyToKey-- KeyCode::SHIFT_L, VK_OPTION, KeyCode::SPACE, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::SHIFT_R, VK_OPTION, KeyCode::SPACE, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Use PC Style Alt+F4</name>
          <appendix>Disable Cmd+Q, remap Alt/Cmd+F4 to Cmd+Q</appendix>
          <identifier>remap.pcstyle_altf4</identifier>
          <autogen>--KeyToKey-- KeyCode::F4, VK_COMMAND, KeyCode::Q, VK_COMMAND</autogen>
          <autogen>--KeyToKey-- KeyCode::F4, VK_OPTION,  KeyCode::Q, VK_COMMAND</autogen>
          <autogen>--KeyToKey-- KeyCode::Q,  VK_COMMAND, KeyCode::VK_NONE</autogen>
        </item>
      </list>
    </item>

    <item>
      <name>For Dvorak Users</name>
      <list>
        <item>
          <name>------------------------------------------------------------</name>
          <appendix>For Dvorak Input Source</appendix>
        </item>
        <item>
          <name>Dvorak's Control+PNBF to Up/Down/Left/Right</name>
          <appendix>(except Emacs, Terminal, Virtual, RDC, X11, Eclipse)</appendix>
          <identifier>option.dvorak_emacsmode_controlPNBF</identifier>
          <not>EMACS, TERMINAL, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
          <autogen>--KeyToKey-- KeyCode::R, VK_CONTROL, KeyCode::CURSOR_UP</autogen>
          <autogen>--KeyToKey-- KeyCode::Y, VK_CONTROL, KeyCode::CURSOR_RIGHT</autogen>
          <autogen>--KeyToKey-- KeyCode::L, VK_CONTROL, KeyCode::CURSOR_DOWN</autogen>
          <autogen>--KeyToKey-- KeyCode::N, VK_CONTROL, KeyCode::CURSOR_LEFT</autogen>
        </item>
        <item>
          <name>Dvorak's Control+H to Delete</name>
          <identifier>remap.dvorak_controlJ</identifier>
          <autogen>--KeyToKey-- KeyCode::J, ModifierFlag::CONTROL_L, KeyCode::DELETE</autogen>
        </item>
        <item>
          <name>Dvorak's Control+D to Forward Delete</name>
          <identifier>remap.dvorak_controlH</identifier>
          <autogen>--KeyToKey-- KeyCode::H, ModifierFlag::CONTROL_L, KeyCode::FORWARD_DELETE</autogen>
        </item>
        <item>
          <name>Dvorak's Control+W to Option+Delete</name>
          <appendix>(except Emacs, Terminal, X11, virtual machine, RDC, Eclipse)</appendix>
          <identifier>option.dvorak_emacsmode_ex_controlW</identifier>
          <not>EMACS, TERMINAL, VIRTUALMACHINE, REMOTEDESKTOPCONNECTION, X11, ECLIPSE</not>
          <autogen>--KeyToKey-- KeyCode::COMMA, VK_CONTROL, KeyCode::DELETE, ModifierFlag::OPTION_L</autogen>
        </item>

        <item>
          <name>Swap U and I (== Swap Qwerty::F and Qwerty::G)</name>
          <identifier>remap.dvorak_u2i</identifier>
          <!-- Dvorak:U == Qwerty:F, Dvorak:I == Qwerty:G -->
          <autogen>--KeyToKey-- KeyCode::F, KeyCode::G</autogen>
          <autogen>--KeyToKey-- KeyCode::G, KeyCode::F</autogen>
        </item>

        <item>
          <name>Make Cut, Quit work on Mac OS X using Dvorak layout in the same position as on QWERTY</name>
          <appendix>Change Command_L+Q to Command_L+X (X in DV - i.e. Cut) </appendix>
          <appendix>Change Command_L+' to Command_L+Q (Q in DV - i.e. Quit) </appendix>
          <identifier>remap.cut_quit_dvorak_as_QWERTY</identifier>

          <autogen>--KeyToKey-- KeyCode::X, ModifierFlag::COMMAND_L, KeyCode::B, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::Q, ModifierFlag::COMMAND_L, KeyCode::X, ModifierFlag::COMMAND_L</autogen>
        </item>

        <item>
          <name>Make Undo work on Mac OS X using Dvorak layout in the same position as on QWERTY (;)</name>
          <appendix>Change Command_L+; to Command_L+Z (Z in DV - i.e. Undo) </appendix>
          <identifier>remap.undo_dvorak_as_QWERTY</identifier>
          <autogen>--KeyToKey-- KeyCode::Z, ModifierFlag::COMMAND_L, KeyCode::SLASH, ModifierFlag::COMMAND_L</autogen>
        </item>

        <item>
          <name>Make Cut, Copy, Paste, Quit and Undo work on Mac OS X using Dvorak layout</name>
          <appendix>in the same position as on QWERTY</appendix>
          <appendix></appendix>
          <appendix>Change Command_L+Q to Command_L+X (X in DV - i.e. Cut) </appendix>
          <appendix>Change Command_L+J to Command_L+C (C in DV - i.e. Copy) </appendix>
          <appendix>Change Command_L+K to Command_L+V (V in DV - i.e. Paste) </appendix>
          <appendix>Change Command_L+; to Command_L+Z (Z in DV - i.e. Undo) </appendix>
          <appendix>Change Command_L+' to Command_L+Q (Q in DV - i.e. Quit) </appendix>

          <identifier>remap.cut_copy_paste_quit_undo_dvorak_as_QWERTY</identifier>

          <autogen>--KeyToKey-- KeyCode::X, ModifierFlag::COMMAND_L, KeyCode::B, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::C, ModifierFlag::COMMAND_L, KeyCode::I, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::V, ModifierFlag::COMMAND_L, KeyCode::DOT, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::Q, ModifierFlag::COMMAND_L, KeyCode::X, ModifierFlag::COMMAND_L</autogen>
          <autogen>--KeyToKey-- KeyCode::Z, ModifierFlag::COMMAND_L, KeyCode::SLASH, ModifierFlag::COMMAND_L</autogen>
        </item>

        <item>
          <name>------------------------------------------------------------</name>
          <appendix>For U.S. Input Source</appendix>
        </item>

        <!-- ============================================================ -->
        <!-- We must put "Use Dvorak Keyboard Layout" in the tail of Dvorak settings. -->
        <item>
          <name>Use Dvorak Keyboard Layout</name>
          <appendix>(QWERTY to Dvorak)</appendix>
          <identifier>remap.qwerty2dvorak</identifier>
          <include system_xml_path="include/checkbox/snippets/dvorak.xml" />
        </item>

        <item>
          <name>Use Dvorak-Qwerty⌘</name>
          <appendix>(QWERTY to Dvorak)</appendix>
          <appendix>(+ Command+Keys to Qwerty)</appendix>
          <identifier>remap.dvorak2qwerty_qwertycommand</identifier>
          <modifier_not>
            ModifierFlag::COMMAND_L,
            ModifierFlag::COMMAND_R
          </modifier_not>
          <include system_xml_path="include/checkbox/snippets/dvorak.xml" />
        </item>

        <item>
          <name>Use Dvorak - Qwerty Keyboard Layout</name>
          <appendix>(QWERTY to Dvorak)</appendix>
          <appendix>(+ Command,Control,Option+Keys to Qwerty)</appendix>
          <identifier>remap.qwerty2dvorak_qwerty</identifier>
          <modifier_not>
            ModifierFlag::COMMAND_L,
            ModifierFlag::COMMAND_R,
            ModifierFlag::CONTROL_L,
            ModifierFlag::CONTROL_R,
            ModifierFlag::OPTION_L,
            ModifierFlag::OPTION_R
          </modifier_not>
          <include system_xml_path="include/checkbox/snippets/dvorak.xml" />
        </item>

        <item>
          <name>Use Dvorak Keyboard Layout</name>
          <appendix>(QWERTY to Dvorak, except in password dialogue boxes)</appendix>
          <identifier>remap.qwerty2dvorak_ex_password</identifier>
          <not>PASSWORD</not>
          <include system_xml_path="include/checkbox/snippets/dvorak.xml" />
        </item>

        <item>
          <name>Use Dvorak Keyboard Layout</name>
          <appendix>(QWERTY to Dvorak)</appendix>
          <appendix>(+ Swap U and I)</appendix>
          <identifier>remap.qwerty2dvorak_swap_ui</identifier>
          <autogen>--KeyToKey-- KeyCode::Q, KeyCode::QUOTE</autogen>
          <autogen>--KeyToKey-- KeyCode::W, KeyCode::COMMA</autogen>
          <autogen>--KeyToKey-- KeyCode::E, KeyCode::DOT</autogen>
          <autogen>--KeyToKey-- KeyCode::R, KeyCode::P</autogen>
          <autogen>--KeyToKey-- KeyCode::T, KeyCode::Y</autogen>
          <autogen>--KeyToKey-- KeyCode::Y, KeyCode::F</autogen>
          <autogen>--KeyToKey-- KeyCode::U, KeyCode::G</autogen>
          <autogen>--KeyToKey-- KeyCode::I, KeyCode::C</autogen>
          <autogen>--KeyToKey-- KeyCode::O, KeyCode::R</autogen>
          <autogen>--KeyToKey-- KeyCode::P, KeyCode::L</autogen>
          <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, KeyCode::SLASH</autogen>
          <autogen>--KeyToKey-- KeyCode::BRACKET_RIGHT, KeyCode::EQUAL</autogen>
          <autogen>--KeyToKey-- KeyCode::S, KeyCode::O</autogen>
          <autogen>--KeyToKey-- KeyCode::D, KeyCode::E</autogen>
          <autogen>--KeyToKey-- KeyCode::F, KeyCode::I</autogen>
          <autogen>--KeyToKey-- KeyCode::G, KeyCode::U</autogen>
          <autogen>--KeyToKey-- KeyCode::H, KeyCode::D</autogen>
          <autogen>--KeyToKey-- KeyCode::J, KeyCode::H</autogen>
          <autogen>--KeyToKey-- KeyCode::K, KeyCode::T</autogen>
          <autogen>--KeyToKey-- KeyCode::L, KeyCode::N</autogen>
          <autogen>--KeyToKey-- KeyCode::SEMICOLON, KeyCode::S</autogen>
          <autogen>--KeyToKey-- KeyCode::QUOTE, KeyCode::MINUS</autogen>
          <autogen>--KeyToKey-- KeyCode::Z, KeyCode::SEMICOLON</autogen>
          <autogen>--KeyToKey-- KeyCode::X, KeyCode::Q</autogen>
          <autogen>--KeyToKey-- KeyCode::C, KeyCode::J</autogen>
          <autogen>--KeyToKey-- KeyCode::V, KeyCode::K</autogen>
          <autogen>--KeyToKey-- KeyCode::B, KeyCode::X</autogen>
          <autogen>--KeyToKey-- KeyCode::N, KeyCode::B</autogen>
          <autogen>--KeyToKey-- KeyCode::COMMA, KeyCode::W</autogen>
          <autogen>--KeyToKey-- KeyCode::DOT, KeyCode::V</autogen>
          <autogen>--KeyToKey-- KeyCode::SLASH, KeyCode::Z</autogen>
          <autogen>--KeyToKey-- KeyCode::MINUS, KeyCode::BRACKET_LEFT</autogen>
          <autogen>--KeyToKey-- KeyCode::EQUAL, KeyCode::BRACKET_RIGHT</autogen>
        </item>
      </list>
    </item>

    <item>
      <name>Device Specific Mixed Settings</name>
      <list>
        <item>
          <name>For MacBook series (vid/pid: 0x05ac,0x0236)</name>
          <list>
            <item>
              <name>Swap Command_L and Option_L on MacBook pro (vid/pid: 0x05ac,0x0236)</name>
              <identifier>remap.swap_commandL_and_optionL_mac_book_pro_0x0236</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0236</device_only>
                <autogen>--KeyToKey-- KeyCode::COMMAND_L, KeyCode::OPTION_L</autogen>
                <autogen>--KeyToKey-- KeyCode::OPTION_L, KeyCode::COMMAND_L</autogen>
              </block>
            </item>
          </list>
        </item>

        <item>
          <name>For MacBook series (vid/pid: 0x05ac,0x021a)</name>
          <list>
            <item>
              <name>Backslash to R Bracket</name>
              <identifier>remap.backslash_to_bracket_r_0x05ac_0x021a</identifier>
              <autogen>--KeyToKey-- KeyCode::BACKSLASH, KeyCode::BRACKET_RIGHT</autogen>
              <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x021a</device_only>
            </item>

            <item>
              <name>Fix Keyboard Upgrade!</name>
              <identifier>remap.fix_keyboard_upgrade_0x05ac_0x021a</identifier>
              <autogen>--ConsumerToKey-- ConsumerKeyCode::VOLUME_MUTE, KeyCode::EXPOSE_ALL</autogen>
              <autogen>--ConsumerToKey-- ConsumerKeyCode::VOLUME_DOWN, KeyCode::DASHBOARD</autogen>
              <autogen>--ConsumerToConsumer-- ConsumerKeyCode::VOLUME_UP, ConsumerKeyCode::KEYBOARDLIGHT_LOW</autogen>
              <autogen>--ConsumerToConsumer-- ConsumerKeyCode::NUMLOCK, ConsumerKeyCode::KEYBOARDLIGHT_HIGH</autogen>
              <autogen>--ConsumerToConsumer-- ConsumerKeyCode::VIDEO_MIRROR, ConsumerKeyCode::MUSIC_PREV</autogen>
              <autogen>--ConsumerToConsumer-- ConsumerKeyCode::KEYBOARDLIGHT_OFF, ConsumerKeyCode::MUSIC_PLAY</autogen>
              <autogen>--ConsumerToConsumer-- ConsumerKeyCode::KEYBOARDLIGHT_LOW, ConsumerKeyCode::MUSIC_NEXT</autogen>
              <autogen>--ConsumerToConsumer-- ConsumerKeyCode::KEYBOARDLIGHT_HIGH, ConsumerKeyCode::VOLUME_MUTE</autogen>
              <autogen>--KeyToConsumer-- KeyCode::F11, ConsumerKeyCode::VOLUME_DOWN</autogen>
              <autogen>--KeyToConsumer-- KeyCode::F12, ConsumerKeyCode::VOLUME_UP</autogen>
              <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x021a</device_only>
            </item>
          </list>
        </item>

        <item>
          <name>For MacBook series (vid/pid: 0x05ac,0x0218)</name>
          <list>
            <item>
              <name>Swap Shift_L and CapsLock on the Mac's internal kbd (vid/pid: 0x05ac,0x0218)</name>
              <appendix>(*Note: I have set PCKeyboardHack to remap CapsLock to ExposeAll on all kbds*)</appendix>
              <appendix>(ExposeAll to Shift_L and Shift_L to CapsLock on the MacBook's internal keyboard)</appendix>
              <appendix>(ExposeAll back to CapsLock on other devices)</appendix>
              <identifier>remap.swap_shiftLcapslock_MacBookOnly</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0218</device_only>
                <autogen>--KeyToKey-- KeyCode::EXPOSE_ALL, KeyCode::SHIFT_L</autogen>
                <autogen>--KeyToKey-- KeyCode::SHIFT_L, KeyCode::CAPSLOCK</autogen>
              </block>
              <block>
                <device_not>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0218</device_not>
                <autogen>--KeyToKey-- KeyCode::EXPOSE_ALL, KeyCode::CAPSLOCK</autogen>
              </block>
            </item>
            <item>
              <name>Revert CapsLock to normal on every kbds</name>
              <appendix>(*Note: I have set PCKeyboardHack to remap CapsLock to ExposeAll on all kbds*)</appendix>
              <identifier>remap.restorecapslock_AllKeyboards</identifier>
              <autogen>--KeyToKey-- KeyCode::EXPOSE_ALL, KeyCode::CAPSLOCK</autogen>
            </item>

            <item>
              <name>Command_R to Option_R on the MacBook's internal kbd (vid/pid: 0x05ac,0x0218)</name>
              <identifier>remap.commandR2optionR_MacBookOnly</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0218</device_only>
                <autogen>--KeyToKey-- KeyCode::COMMAND_R, KeyCode::OPTION_R</autogen>
              </block>
            </item>
            <item>
              <name>Enter to Control_R on the MacBook's internal kbd (vid/pid: 0x05ac,0x0218)</name>
              <identifier>remap.enter2controlR_MacBookOnly</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0218</device_only>
                <autogen>--KeyToKey-- KeyCode::ENTER, KeyCode::CONTROL_R</autogen>
              </block>
            </item>
            <item>
              <name>Swap Shift_R and Backslash (\) on the MacBook's internal kbd (vid/pid: 0x05ac,0x0218)</name>
              <identifier>remap.swap_shiftRpipes_MacBookOnly</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0218</device_only>
                <autogen>--KeyToKey-- KeyCode::SHIFT_R, KeyCode::BACKSLASH</autogen>
                <autogen>--KeyToKey-- KeyCode::BACKSLASH, KeyCode::SHIFT_R</autogen>
              </block>
            </item>
            <item>
              <name>‘last row left-shift’ on the MacBook's internal kbd (vid/pid: 0x05ac,0x0218)</name>
              <appendix>(Backquote,Z,X,C,V to Z,X,C,V,B)</appendix>
              <identifier>remap.backquote2z_zxcv2xcvb_MacBookOnly</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0218</device_only>
                <autogen>--KeyToKey-- KeyCode::BACKQUOTE, KeyCode::Z</autogen>
                <autogen>--KeyToKey-- KeyCode::Z, KeyCode::X</autogen>
                <autogen>--KeyToKey-- KeyCode::X, KeyCode::C</autogen>
                <autogen>--KeyToKey-- KeyCode::C, KeyCode::V</autogen>
                <autogen>--KeyToKey-- KeyCode::V, KeyCode::B</autogen>
              </block>
            </item>
            <item>
              <name>‘Central-Return’ (B to Return) on the MacBook's internal kbd (vid/pid: 0x05ac,0x0218)</name>
              <identifier>remap.b2return_MacBookOnly</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0218</device_only>
                <autogen>--KeyToKey-- KeyCode::B, KeyCode::RETURN</autogen>
              </block>
            </item>
            <item>
              <name>‘first row right-shift’ on the MacBook's internal kbd (vid/pid: 0x05ac,0x0218)</name>
              <appendix>(7,8,9,0,-,=,delete to 6,7,8,9,0,-,=)</appendix>
              <identifier>remap.firstrowshift_MacBookOnly</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0218</device_only>
                <autogen>--KeyToKey-- KeyCode::KEY_7, KeyCode::KEY_6</autogen>
                <autogen>--KeyToKey-- KeyCode::KEY_8, KeyCode::KEY_7</autogen>
                <autogen>--KeyToKey-- KeyCode::KEY_9, KeyCode::KEY_8</autogen>
                <autogen>--KeyToKey-- KeyCode::KEY_0, KeyCode::KEY_9</autogen>
                <autogen>--KeyToKey-- KeyCode::MINUS, KeyCode::KEY_0</autogen>
                <autogen>--KeyToKey-- KeyCode::EQUAL, KeyCode::MINUS</autogen>
                <autogen>--KeyToKey-- KeyCode::DELETE, KeyCode::EQUAL</autogen>
              </block>
            </item>
            <item>
              <name>‘Central-Delete’ (6 to Delete) on the MacBook's internal kbd (vid/pid: 0x05ac,0x0218)</name>
              <identifier>remap.six2delete_MacBookOnly</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0218</device_only>
                <autogen>--KeyToKey-- KeyCode::KEY_6, KeyCode::DELETE</autogen>
              </block>
            </item>
          </list>
        </item>

        <item>
          <name>For Magic Mouse (vid/pid: 0x05ac,0x030d)</name>
          <list>
            <item>
              <name>Disable ScrollWheel</name>
              <identifier>remap.dropscrollwheel_0x05ac_0x030d</identifier>
              <block>
                <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::MAGIC_MOUSE</device_only>
                <autogen>--DropScrollWheel--</autogen>
              </block>
            </item>
          </list>
        </item>

        <item>
          <name>For Logitech Devices</name>
          <list>
            <item>
              <name>Tilt Wheel to Back/Forward (Command+[, Command+]) on Logitech MX620</name>
              <identifier>remap.tilt_to_back_forward</identifier>
              <device_only>DeviceVendor::LOGITECH, DeviceProduct::LOGITECH_MX620</device_only>
              <autogen>--ScrollWheelToKey-- ScrollWheel::LEFT, ModifierFlag::NONE,
                KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_L</autogen>
              <autogen>--ScrollWheelToKey-- ScrollWheel::RIGHT, ModifierFlag::NONE,
                KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_L</autogen>
            </item>
          </list>
        </item>

        <item>
          <name>For TypeMatrix 2030</name>
          <list>
            <item>
              <name>Swap Command_L and Option_L on TypeMatrix 2030 kbd</name>
              <identifier>remap.swap_commandLoptionL_TypeMatrixOnly</identifier>
              <block>
                <device_only>DeviceVendor::TYPEMATRIX,DeviceProduct::TYPEMATRIX_KEYBOARD_0x2030</device_only>
                <autogen>--KeyToKey-- KeyCode::COMMAND_L, KeyCode::OPTION_L</autogen>
                <autogen>--KeyToKey-- KeyCode::OPTION_L, KeyCode::COMMAND_L</autogen>
              </block>
            </item>
            <item>
              <name>Option+Tab to Command+Tab on TypeMatrix 2030 kbd</name>
              <identifier>remap.optionTab2commandTab_TypeMatrixOnly</identifier>
              <block>
                <device_only>DeviceVendor::TYPEMATRIX,DeviceProduct::TYPEMATRIX_KEYBOARD_0x2030</device_only>
                <autogen>--KeyToKey-- KeyCode::TAB, VK_OPTION, KeyCode::TAB, ModifierFlag::COMMAND_L</autogen>
              </block>
            </item>

            <item>
              <name>Application Key to Command_L+Backquote on TypeMatrix 2030 kbd</name>
              <identifier>remap.pc_application2commandLbackquote_TypeMatrixOnly</identifier>
              <block>
                <device_only>DeviceVendor::TYPEMATRIX,DeviceProduct::TYPEMATRIX_KEYBOARD_0x2030</device_only>
                <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::BACKQUOTE, ModifierFlag::COMMAND_L</autogen>
              </block>
            </item>

            <item>
              <name>Use PC Style Copy/Paste #3 on TypeMatrix 2030 kbd</name>
              <appendix>(Control+Insert to Command_L+C)</appendix>
              <appendix>(Shift+Insert to Command_L+V)</appendix>
              <appendix>(Shift+Delete to Command_L+X) (Note: "Delete" is Mac's Forward Delete)</appendix>
              <identifier>remap.copy_paste_winstyle3_TypeMatrixOnly</identifier>
              <block>
                <device_only>DeviceVendor::TYPEMATRIX,DeviceProduct::TYPEMATRIX_KEYBOARD_0x2030</device_only>
                <autogen>--KeyToKey-- KeyCode::PC_INSERT, VK_CONTROL, KeyCode::C, ModifierFlag::COMMAND_L</autogen>
                <autogen>--KeyToKey-- KeyCode::PC_INSERT, VK_SHIFT, KeyCode::V, ModifierFlag::COMMAND_L</autogen>
                <autogen>--KeyToKey-- KeyCode::FORWARD_DELETE, VK_SHIFT, KeyCode::X, ModifierFlag::COMMAND_L</autogen>
              </block>
            </item>
            <item>
              <name>Use PC Style Copy/Paste #3bis (for bépo / french dvorak) on TypeMatrix 2030 kbd</name>
              <appendix>(Control+Insert to Command_L+C)</appendix>
              <appendix>(Shift+Insert to Command_L+V)</appendix>
              <appendix>(Shift+Delete to Command_L+X) (Note: "Delete" is Mac's Forward Delete)</appendix>
              <identifier>remap.copy_paste_winstyle3b_TypeMatrixOnly</identifier>
              <block>
                <device_only>DeviceVendor::TYPEMATRIX,DeviceProduct::TYPEMATRIX_KEYBOARD_0x2030</device_only>
                <autogen>--KeyToKey-- KeyCode::PC_INSERT, VK_CONTROL, KeyCode::H, ModifierFlag::COMMAND_L</autogen>
                <autogen>--KeyToKey-- KeyCode::PC_INSERT, VK_SHIFT, KeyCode::U, ModifierFlag::COMMAND_L</autogen>
                <autogen>--KeyToKey-- KeyCode::FORWARD_DELETE, VK_SHIFT, KeyCode::C, ModifierFlag::COMMAND_L</autogen>
              </block>
            </item>

            <item>
              <name>Make Cut, Copy, Paste work on TypeMatrix 2030 using Dvorak layout in MacOS X</name>
              <appendix>Change Shift+Delete to Command_L+B (X in DV - i.e. Cut)</appendix>
              <appendix>Change Control+Insert to Command_L+I (C in DV - i.e. Copy) </appendix>
              <appendix>Change Shift+Insert to Command_L+. (V in DV - i.e. Paste) </appendix>
              <identifier>remap.typematrix_winstyle_zxc_dvorak</identifier>
              <block>
                <device_only>DeviceVendor::TYPEMATRIX,DeviceProduct::TYPEMATRIX_KEYBOARD_0x2030</device_only>
                <autogen>--KeyToKey-- KeyCode::FORWARD_DELETE, VK_SHIFT   | ModifierFlag::NONE, KeyCode::B,   ModifierFlag::COMMAND_L</autogen>
                <autogen>--KeyToKey-- KeyCode::PC_INSERT,      VK_CONTROL | ModifierFlag::NONE, KeyCode::I,   ModifierFlag::COMMAND_L</autogen>
                <autogen>--KeyToKey-- KeyCode::PC_INSERT,      VK_SHIFT   | ModifierFlag::NONE, KeyCode::DOT, ModifierFlag::COMMAND_L</autogen>
              </block>
            </item>
          </list>
        </item>

        <item>
          <name>For IBM Model M Keyboard</name>
          <list>
            <item>
              <name>Change IBM Model M Keyboard</name>
              <appendix>(with PS2-to-USB adapters (Chesen Electronics Corp))</appendix>
              <appendix>Bottom row of Model M keyboard:</appendix>
              <appendix>   Original: Ctrl Alt [space bar] Alt Ctrl</appendix>
              <appendix>   Remapped: Ctrl Cmd [space bar] Cmd Alt</appendix>
              <identifier>remap.modelMkeyboard</identifier>
              <device_only>DeviceVendor::CHESEN,DeviceProduct::CHESEN_PS2_TO_USB</device_only>
              <autogen>--KeyToKey-- KeyCode::OPTION_L, KeyCode::COMMAND_L</autogen>
              <autogen>--KeyToKey-- KeyCode::OPTION_R, KeyCode::COMMAND_R</autogen>
              <autogen>--KeyToKey-- KeyCode::CONTROL_R, KeyCode::OPTION_R</autogen>
            </item>
            <item>
              <name>Swap Start (aka Command) and Alt keys on Windows keyboard</name>
              <identifier>remap.windows4mac</identifier>
              <autogen>--KeyToKey-- KeyCode::OPTION_L, KeyCode::COMMAND_L</autogen>
              <autogen>--KeyToKey-- KeyCode::OPTION_R, KeyCode::COMMAND_R</autogen>
              <autogen>--KeyToKey-- KeyCode::COMMAND_L, KeyCode::OPTION_L</autogen>
              <autogen>--KeyToKey-- KeyCode::COMMAND_R, KeyCode::OPTION_R</autogen>
            </item>
          </list>
        </item>

        <item>
          <name>For Unicomp SpaceSaver M</name>
          <list>
            <item>
              <name>Change Fn+F1..F12 keys to F1..F12 (only in Emacs)</name>
              <identifier>remap.SpaceSaverM.function_key_mapping_emacs</identifier>
              <only>EMACS</only>
              <device_only>DeviceVendor::Unicomp_Inc, DeviceProduct::Unicomp_SpaceSaver_M_Keyboard</device_only>
              <autogen>--KeyToKey-- KeyCode::F14, KeyCode::F1</autogen>
              <autogen>--KeyToKey-- KeyCode::F15, KeyCode::F2</autogen>
              <autogen>--KeyToKey-- KeyCode::F9,  KeyCode::F3</autogen>
              <autogen>--KeyToKey-- KeyCode::F12, KeyCode::F4</autogen>
              <!-- F5 and F6 are mapped correctly as-is: No remapping needed -->
              <autogen>--ConsumerToKey-- ConsumerKeyCode::MUSIC_PREV_18, KeyCode::F7</autogen>
              <autogen>--ConsumerToKey-- ConsumerKeyCode::MUSIC_PLAY, KeyCode::F8</autogen>
              <autogen>--ConsumerToKey-- ConsumerKeyCode::MUSIC_NEXT_17, KeyCode::F9</autogen>
              <autogen>--ConsumerToKey-- ConsumerKeyCode::VOLUME_MUTE, KeyCode::F10</autogen>
              <autogen>--ConsumerToKey-- ConsumerKeyCode::VOLUME_DOWN, KeyCode::F11</autogen>
            </item>
          </list>
        </item>

        <item>
          <name>For HHK (Happy Hacking Keyboard) Users</name>
          <list>
            <item>
              <name>Enable HHK compatible Arrow Key Mode</name>
              <identifier>remap.hhkmode</identifier>
              <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, ModifierFlag::FN, KeyCode::CURSOR_UP</autogen>
              <autogen>--KeyToKey-- KeyCode::SEMICOLON,    ModifierFlag::FN, KeyCode::CURSOR_LEFT</autogen>
              <autogen>--KeyToKey-- KeyCode::QUOTE,        ModifierFlag::FN, KeyCode::CURSOR_RIGHT</autogen>
              <autogen>--KeyToKey-- KeyCode::SLASH,        ModifierFlag::FN, KeyCode::CURSOR_DOWN</autogen>
              <autogen>--KeyToKey-- KeyCode::L,            ModifierFlag::FN, KeyCode::PAGEUP</autogen>
              <autogen>--KeyToKey-- KeyCode::DOT,          ModifierFlag::FN, KeyCode::PAGEDOWN</autogen>
              <autogen>--KeyToKey-- KeyCode::K,            ModifierFlag::FN, KeyCode::HOME</autogen>
              <autogen>--KeyToKey-- KeyCode::COMMA,        ModifierFlag::FN, KeyCode::END</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_1,        ModifierFlag::FN, KeyCode::F1</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_2,        ModifierFlag::FN, KeyCode::F2</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_3,        ModifierFlag::FN, KeyCode::F3</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_4,        ModifierFlag::FN, KeyCode::F4</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_5,        ModifierFlag::FN, KeyCode::F5</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_6,        ModifierFlag::FN, KeyCode::F6</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_7,        ModifierFlag::FN, KeyCode::F7</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_8,        ModifierFlag::FN, KeyCode::F8</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_9,        ModifierFlag::FN, KeyCode::F9</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_0,        ModifierFlag::FN, KeyCode::F10</autogen>
              <autogen>--KeyToKey-- KeyCode::MINUS,        ModifierFlag::FN, KeyCode::F11</autogen>
              <autogen>--KeyToKey-- KeyCode::EQUAL,        ModifierFlag::FN, KeyCode::F12</autogen>
            </item>
            <item>
              <name>Enable Fn+hjkl at HHK to Left/Down/Up/Right</name>
              <identifier>remap.hhkmode_vi_cursor</identifier>
              <autogen>--KeyToKey-- KeyCode::KEYPAD_MULTIPLY, KeyCode::CURSOR_LEFT</autogen>
              <autogen>--KeyToKey-- KeyCode::KEYPAD_SLASH,    KeyCode::CURSOR_DOWN</autogen>
              <autogen>--KeyToKey-- KeyCode::HOME,            KeyCode::CURSOR_UP</autogen>
              <autogen>--KeyToKey-- KeyCode::PAGEUP,          KeyCode::CURSOR_RIGHT</autogen>
            </item>
            <item>
              <name>Change Option_L+1...= to F1...F12 Keys</name>
              <identifier>remap.hhkmode_opt1_optEqual_to_f1_f12</identifier>
              <autogen>--KeyToKey-- KeyCode::KEY_1, ModifierFlag::OPTION_L,     KeyCode::F1</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_2, ModifierFlag::OPTION_L,     KeyCode::F2</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_3, ModifierFlag::OPTION_L,     KeyCode::F3</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_4, ModifierFlag::OPTION_L,     KeyCode::F4</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_5, ModifierFlag::OPTION_L,     KeyCode::F5</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_6, ModifierFlag::OPTION_L,     KeyCode::F6</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_7, ModifierFlag::OPTION_L,     KeyCode::F7</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_8, ModifierFlag::OPTION_L,     KeyCode::F8</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_9, ModifierFlag::OPTION_L,     KeyCode::F9</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_0, ModifierFlag::OPTION_L,     KeyCode::F10</autogen>
              <autogen>--KeyToKey-- KeyCode::MINUS, ModifierFlag::OPTION_L,     KeyCode::F11</autogen>
              <autogen>--KeyToKey-- KeyCode::EQUAL, ModifierFlag::OPTION_L,     KeyCode::F12</autogen>
            </item>
          </list>
        </item>

        <item>
          <name>For Targus Bluetooth Presenter</name>
          <list>
            <item>
              <name>Fix Targus Bluetooth Presenter</name>
              <appendix>Map shift-up to up and shift-down to down</appendix>
              <identifier>remap.targus_bluetooth_presenter_fix</identifier>
              <device_only>DeviceVendor::TARGUS,DeviceProduct::TARGUS_BLUETOOTH_PRESENTER</device_only>
              <autogen>--KeyToKey-- KeyCode::CURSOR_UP, VK_SHIFT, KeyCode::CURSOR_UP</autogen>
              <autogen>--KeyToKey-- KeyCode::CURSOR_DOWN, VK_SHIFT, KeyCode::CURSOR_DOWN</autogen>
            </item>
          </list>
        </item>

        <item>
          <name>For FILCO FKBN91ML/NB</name>
          <list>
            <item>
              <name>Swap CapsLock and Control on FILCO FKBN91ML/NB</name>
              <appendix>// We perform it through PC Application Key.</appendix>
              <appendix>// Set CapsLock key code to 110 by PCKeyboardHack.</appendix>
              <identifier>remap.swap_capslock_and_control_FKBN91ML</identifier>
              <block>
                <device_only>DeviceVendor::FILCO,DeviceProduct::FKBN91ML_NB</device_only>
                <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::CONTROL_L</autogen>
                <autogen>--KeyToKey-- KeyCode::CONTROL_L, KeyCode::CAPSLOCK</autogen>
              </block>
              <block>
                <device_not>DeviceVendor::FILCO,DeviceProduct::FKBN91ML_NB</device_not>
                <autogen>--KeyToKey-- KeyCode::PC_APPLICATION, KeyCode::CAPSLOCK</autogen>
              </block>
            </item>
            <item>
              <name>Swap Command_L and Option_L on FILCO FKBN91ML/NB</name>
              <identifier>remap.swap_commandL_and_optionL_FKBN91ML</identifier>
              <block>
                <device_only>DeviceVendor::FILCO,DeviceProduct::FKBN91ML_NB</device_only>
                <autogen>--KeyToKey-- KeyCode::COMMAND_L, KeyCode::OPTION_L</autogen>
                <autogen>--KeyToKey-- KeyCode::OPTION_L,  KeyCode::COMMAND_L</autogen>
              </block>
            </item>
          </list>
        </item>

        <item>
          <name>For Sun Type6 keyboard</name>
          <list>
            <item>
              <name>Exchange ^ and greater key on Sun Type6 keyboard </name>
              <identifier>remap.sun.greaterkey</identifier>
              <device_only>DeviceVendor::FUJITSU, DeviceProduct::SUN_TYPE_6_KEYBOARD</device_only>
              <!-- The order is important -->
              <autogen>--KeyToKey--
                KeyCode::GERMAN_CIRCUMFLEX, ModifierFlag::OPTION_R | ModifierFlag::NONE,
                KeyCode::KEY_7, ModifierFlag::OPTION_R
              </autogen>
              <autogen>--KeyToKey--
                KeyCode::GERMAN_CIRCUMFLEX, ModifierFlag::OPTION_L | ModifierFlag::NONE,
                KeyCode::KEY_7, ModifierFlag::OPTION_L
              </autogen>

              <autogen>--KeyToKey-- KeyCode::GERMAN_CIRCUMFLEX, KeyCode::GERMAN_LESS_THAN</autogen>
              <autogen>--KeyToKey-- KeyCode::GERMAN_LESS_THAN, KeyCode::GERMAN_CIRCUMFLEX</autogen>
            </item>
          </list>
        </item>
      </list>
    </item>

    <item>
      <name>For International English Keyboard and ISO Keyboard Users</name>
      <list>
        <item>
          <name>Improve ISO Keyboard Layout</name>
          <appendix>( '\' to additional Enter, '§' to '`' and '`' to '\' )</appendix>
          <identifier>remap.uk_saneuklayout</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::BACKQUOTE</autogen>
          <autogen>--KeyToKey-- KeyCode::BACKQUOTE, KeyCode::BACKSLASH</autogen>
          <autogen>--KeyToKey-- KeyCode::BACKSLASH, KeyCode::ENTER</autogen>
        </item>
        <item>
          <name>Improve ISO Keyboard Layout (Option 2)</name>
          <appendix>( '§' to '`' and '`' to '\' )</appendix>
          <identifier>remap.uk_saneuklayout2</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::BACKQUOTE</autogen>
          <autogen>--KeyToKey-- KeyCode::BACKQUOTE, KeyCode::BACKSLASH</autogen>
        </item>
        <item>
          <name>Swap @ and double-quote(")</name>
          <identifier>remap.uk_swap_at_doublequote</identifier>
          <autogen>--KeyToKey-- KeyCode::KEY_2, VK_SHIFT, KeyCode::QUOTE, ModifierFlag::SHIFT_L</autogen>
          <autogen>--KeyToKey-- KeyCode::QUOTE, VK_SHIFT, KeyCode::KEY_2, ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Swap the Tilda(~) key with Section (§)</name>
          <identifier>remap.iso_swap_tilda_section</identifier>
          <autogen>--KeyToKey-- KeyCode::BACKQUOTE,  KeyCode::UK_SECTION</autogen>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::BACKQUOTE</autogen>
        </item>
        <item>
          <name>Make Shift_R the Backslash (\)  and Backslash (\) into an extra Enter</name>
          <identifier>remap.iso_better_enter</identifier>
          <autogen>--KeyToKey-- KeyCode::SHIFT_R, KeyCode::BACKSLASH</autogen>
          <autogen>--KeyToKey-- KeyCode::BACKSLASH, KeyCode::ENTER</autogen>
        </item>
        <item>
          <name>Backquote(`) to Backslash(\)</name>
          <identifier>remap.uk_backquote2backslash</identifier>
          <autogen>--KeyToKey-- KeyCode::BACKQUOTE, KeyCode::BACKSLASH</autogen>
        </item>
        <item>
          <name>Backquote(`) to Section(§)</name>
          <identifier>remap.uk_backquote2section</identifier>
          <autogen>--KeyToKey-- KeyCode::BACKQUOTE, KeyCode::UK_SECTION</autogen>
        </item>
        <item>
          <name>Backquote(`) to Shift_L</name>
          <identifier>remap.uk_backquote2shiftL</identifier>
          <autogen>--KeyToKey-- KeyCode::BACKQUOTE, KeyCode::SHIFT_L</autogen>
        </item>
        <item>
          <name>Backslash(\) to Option_L+3 (Hash #), Shift+Backslash(\) to Tilde(~)</name>
          <identifier>remap.uk_backslash2hash</identifier>
          <autogen>--KeyToKey-- KeyCode::BACKSLASH, VK_SHIFT, KeyCode::BACKQUOTE, ModifierFlag::SHIFT_L</autogen>
          <autogen>--KeyToKey-- KeyCode::BACKSLASH, KeyCode::KEY_3, ModifierFlag::OPTION_L</autogen>
        </item>
        <item>
          <name>Forward Delete to Section(§)</name>
          <identifier>remap.uk_forwarddelete2section</identifier>
          <autogen>--KeyToKey-- FROMKEYCODE_FORWARD_DELETE, KeyCode::UK_SECTION</autogen>
        </item>
        <item>
          <name>Section(§) to Option_L+3 (Hash #), Shift+Section(§) to Tilde(~)</name>
          <identifier>remap.uk_section2hash</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, VK_SHIFT, KeyCode::BACKQUOTE, ModifierFlag::SHIFT_L</autogen>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::KEY_3, ModifierFlag::OPTION_L</autogen>
        </item>
        <item>
          <name>Section(§) to Command_L</name>
          <identifier>remap.section_to_command_l</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::COMMAND_L</autogen>
        </item>
        <item>
          <name>Section(§) to Control_L</name>
          <identifier>remap.section_to_control_l</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::CONTROL_L</autogen>
        </item>
        <item>
          <name>Section(§) to Option_L</name>
          <identifier>remap.section_to_option_l</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::OPTION_L</autogen>
        </item>
        <item>
          <name>Section(§) to Shift_L</name>
          <identifier>remap.section_to_shift_l</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::SHIFT_L</autogen>
        </item>
        <item>
          <name>Section(§) to Backquote(`)</name>
          <identifier>remap.uk_section2backquote</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::BACKQUOTE</autogen>
        </item>
        <item>
          <name>Section(§) to Backquote(`)</name>
          <appendix>(except virtual machine)</appendix>
          <identifier>remap.uk_section2backquote_ex_vm</identifier>
          <not>VIRTUALMACHINE</not>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::BACKQUOTE</autogen>
        </item>
        <item>
          <name>Section(§) to Backslash(\)</name>
          <identifier>remap.uk_section2backslash</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::BACKSLASH</autogen>
        </item>
        <item>
          <name>Section(§) to Forward Delete</name>
          <identifier>remap.uk_section2forwarddelete</identifier>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::FORWARD_DELETE</autogen>
        </item>
        <item>
          <name>Section(§) to LeftClick</name>
          <identifier>remap.strangekey_to_leftclick</identifier>
          <autogen>--KeyToPointingButton-- KeyCode::UK_SECTION, PointingButton::LEFT</autogen>
        </item>
      </list>
    </item>

    <item>
      <name>For Belgian</name>
      <list>
        <item>
          <name>Change KeyPad Comma(,) to Dot(.)</name>
          <identifier>remap.belgian_keypad_comma_to_dot</identifier>
          <autogen>--KeyToKey-- KeyCode::KEYPAD_DOT, KeyCode::KEYPAD_DOT, ModifierFlag::SHIFT_L</autogen>
        </item>
      </list>
    </item>

    <item>
      <name>For Bulgarian</name>
      <list>
        <item>
          <name>Change underscore(_) on Japanese keyboard to ч</name>
          <appendix>(For Bulgarian-Phonetic)</appendix>
          <identifier>remap.bulgarian_jis_underscore_to_backquote</identifier>
          <inputmode_only>BULGARIAN</inputmode_only>
          <autogen>--KeyToKey-- KeyCode::JIS_UNDERSCORE, KeyCode::BACKQUOTE</autogen>
        </item>
      </list>
    </item>

    <item>
      <name>For Canadian</name>
      <list>
        <item>
          <name>Space to Option_L (when inputmode == canadian)</name>
          <identifier>remap.canadian_space2optionL</identifier>
          <inputmode_only>CANADIAN</inputmode_only>
          <autogen>--KeyToKey-- KeyCode::SPACE, KeyCode::OPTION_L</autogen>
        </item>
        <item>
          <name>Space to Option_L (when inputmode == canadian)</name>
          <appendix>(+ When you type Space only, send Space)</appendix>
          <identifier>remap.canadian_space2optionL_space</identifier>
          <inputmode_only>CANADIAN</inputmode_only>
          <autogen>--KeyOverlaidModifier-- KeyCode::SPACE, KeyCode::OPTION_L, KeyCode::SPACE</autogen>
        </item>
        <item>
          <name>Synchronize the sign of the keyboard and an input letter</name>
          <appendix>using "U.S. International - PC" as Input Source on Canadian French keyboard.</appendix>
          <appendix>(For example, change Shift+6 to ?)</appendix>
          <identifier>remap.use_us_international_on_canadian_french_keyboard</identifier>
          <!-- / -->
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, ModifierFlag::NONE,           KeyCode::SLASH</autogen>
          <!-- \ -->
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, ModifierFlag::NONE|VK_SHIFT,  KeyCode::BACKSLASH</autogen>
          <!-- | -->
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, ModifierFlag::NONE|VK_OPTION, KeyCode::BACKSLASH, ModifierFlag::SHIFT_L</autogen>

          <!-- ? -->
          <autogen>--KeyToKey-- KeyCode::KEY_6,      ModifierFlag::NONE|VK_SHIFT,  KeyCode::SLASH, VK_SHIFT</autogen>
          <!-- { -->
          <autogen>--KeyToKey-- KeyCode::KEY_7,      ModifierFlag::NONE|VK_OPTION, KeyCode::BRACKET_LEFT, ModifierFlag::SHIFT_L</autogen>
          <!-- } -->
          <autogen>--KeyToKey-- KeyCode::KEY_8,      ModifierFlag::NONE|VK_OPTION, KeyCode::BRACKET_RIGHT, ModifierFlag::SHIFT_L</autogen>
          <!-- [ -->
          <autogen>--KeyToKey-- KeyCode::KEY_9,      ModifierFlag::NONE|VK_OPTION, KeyCode::BRACKET_LEFT</autogen>
          <!-- ] -->
          <autogen>--KeyToKey-- KeyCode::KEY_0,      ModifierFlag::NONE|VK_OPTION, KeyCode::BRACKET_RIGHT</autogen>
          <!-- ¬ -->
          <autogen>--KeyToKey-- KeyCode::EQUAL,      ModifierFlag::NONE|VK_OPTION, KeyCode::L, ModifierFlag::OPTION_L</autogen>

          <!-- ============================================================ -->

          <!-- ^ (accent) -->
          <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, ModifierFlag::NONE,           KeyCode::I, ModifierFlag::OPTION_L</autogen>
          <!-- " (accent) -->
          <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, ModifierFlag::NONE|VK_SHIFT,  KeyCode::U, ModifierFlag::OPTION_L</autogen>
          <!-- ` (accent) -->
          <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, ModifierFlag::NONE|VK_OPTION, KeyCode::BACKQUOTE, VK_OPTION</autogen>

          <!-- ============================================================ -->

          <!-- ° -->
          <autogen>--KeyToKey-- KeyCode::SEMICOLON,     ModifierFlag::NONE|VK_OPTION, KeyCode::KEY_8, VK_OPTION | ModifierFlag::SHIFT_L</autogen>

          <!-- ç -->
          <autogen>--KeyToKey-- KeyCode::BRACKET_RIGHT, ModifierFlag::NONE,           KeyCode::C, ModifierFlag::OPTION_L</autogen>
          <!-- Ç -->
          <autogen>--KeyToKey-- KeyCode::BRACKET_RIGHT, ModifierFlag::NONE|VK_SHIFT,  KeyCode::C, ModifierFlag::OPTION_L | VK_SHIFT</autogen>
          <!-- ~ -->
          <autogen>--KeyToKey-- KeyCode::BRACKET_RIGHT, ModifierFlag::NONE|VK_OPTION, KeyCode::BACKQUOTE, ModifierFlag::SHIFT_L</autogen>

          <!-- è -->
          <autogen>--KeyToKey-- KeyCode::QUOTE,         ModifierFlag::NONE,          KeyCode::BACKQUOTE, KeyCode::E</autogen>
          <!-- È -->
          <autogen>--KeyToKey-- KeyCode::QUOTE,         ModifierFlag::NONE|VK_SHIFT, KeyCode::BACKQUOTE, KeyCode::E, VK_SHIFT</autogen>

          <!-- à -->
          <autogen>--KeyToKey-- KeyCode::BACKSLASH,     ModifierFlag::NONE, KeyCode::BACKQUOTE, KeyCode::A</autogen>
          <!-- à -->
          <autogen>--KeyToKey-- KeyCode::BACKSLASH,     ModifierFlag::NONE|VK_SHIFT, KeyCode::BACKQUOTE, KeyCode::A, VK_SHIFT</autogen>

          <!-- ============================================================ -->

          <!-- ù -->
          <autogen>--KeyToKey-- KeyCode::BACKQUOTE, ModifierFlag::NONE,          KeyCode::BACKQUOTE, KeyCode::U</autogen>
          <!-- Ù -->
          <autogen>--KeyToKey-- KeyCode::BACKQUOTE, ModifierFlag::NONE|VK_SHIFT, KeyCode::BACKQUOTE, KeyCode::U, VK_SHIFT</autogen>

          <!-- « -->
          <autogen>--KeyToKey-- KeyCode::Z,     ModifierFlag::NONE|VK_OPTION, KeyCode::BACKSLASH, VK_OPTION</autogen>

          <!-- » -->
          <autogen>--KeyToKey-- KeyCode::X,     ModifierFlag::NONE|VK_OPTION, KeyCode::BACKSLASH, VK_OPTION | ModifierFlag::SHIFT_L</autogen>

          <!-- ' -->
          <autogen>--KeyToKey-- KeyCode::COMMA, ModifierFlag::NONE|VK_SHIFT, KeyCode::BRACKET_RIGHT, ModifierFlag::OPTION_L</autogen>
          <!-- < -->
          <autogen>--KeyToKey-- KeyCode::COMMA, ModifierFlag::NONE|VK_OPTION, KeyCode::COMMA, ModifierFlag::SHIFT_L</autogen>

          <!-- " -->
          <autogen>--KeyToKey-- KeyCode::DOT,   ModifierFlag::NONE|VK_SHIFT, KeyCode::QUOTE, ModifierFlag::SHIFT_L</autogen>

          <!-- > -->
          <autogen>--KeyToKey-- KeyCode::DOT,   ModifierFlag::NONE|VK_OPTION, KeyCode::DOT, ModifierFlag::SHIFT_L</autogen>

          <!-- é -->
          <autogen>--KeyToKey-- KeyCode::SLASH, ModifierFlag::NONE,          KeyCode::QUOTE, KeyCode::E</autogen>
          <!-- é -->
          <autogen>--KeyToKey-- KeyCode::SLASH, ModifierFlag::NONE|VK_SHIFT, KeyCode::QUOTE, KeyCode::E, VK_SHIFT</autogen>
        </item>
      </list>
    </item>
    <item>
      <name>For Czech</name>
      <list>
        <item>
          <name>Remap keyboard (symbol) shortcuts to standard Windows/Linux style</name>
          <appendix></appendix>
          <appendix>Remap keyboard shortcuts on czech keyboard layout to behave like in Windows with AltGr.</appendix>
          <appendix>Recommended: remap your modifier keys under System Preferences-Keyboard-Modifier Keys</appendix>
          <appendix>under Keyboard Tab</appendix>
          <appendix>Notice: Disabled for X11 - you have to use xmodmap (use xev to get kb codes) under</appendix>
          <appendix>xterm in X11</appendix>
          <appendix></appendix>
          <appendix>Control_R (AltGr) + V = @ ... Control_R (AltGr) + C = &amp;</appendix>
          <appendix>Control_R (AltGr) + W = | ... Control_R (AltGr) + E = €</appendix>
          <appendix>Control_R (AltGr) + B = { ... Control_R (AltGr) + N = }</appendix>
          <appendix>Control_R (AltGr) + F = [ ... Control_R (AltGr) + G = ]</appendix>
          <appendix>Control_R (AltGr) + ů = $ ... Control_R (AltGr) + X = #</appendix>
          <appendix>Control_R (AltGr) + A = ~ ... Control_R (AltGr) + Q = \</appendix>
          <appendix>Control_R (AltGr) + , = &lt; ... Control_R (AltGr) + . = &gt;</appendix>
          <appendix>Control_R (AltGr) + - = * ... "key under esc" to ;</appendix>
          <identifier>remap.czech_win_shortcuts</identifier>
          <not>X11</not>
          <autogen>--KeyToKey-- KeyCode::DOT, ModifierFlag::CONTROL_R, KeyCode::DOT, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::COMMA, ModifierFlag::CONTROL_R, KeyCode::COMMA, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::V, ModifierFlag::CONTROL_R, KeyCode::KEY_2, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::SEMICOLON, ModifierFlag::CONTROL_R, KeyCode::KEY_4, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::SLASH, ModifierFlag::CONTROL_R, KeyCode::KEY_8, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::A, ModifierFlag::CONTROL_R, KeyCode::KEY_5, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::C, ModifierFlag::CONTROL_R, KeyCode::KEY_7, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::X, ModifierFlag::CONTROL_R, KeyCode::KEY_3, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::F, ModifierFlag::CONTROL_R, KeyCode::BRACKET_LEFT, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::G, ModifierFlag::CONTROL_R, KeyCode::BRACKET_RIGHT, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::E, ModifierFlag::CONTROL_R, KeyCode::R, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::B, ModifierFlag::CONTROL_R, KeyCode::KEY_9, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::N, ModifierFlag::CONTROL_R, KeyCode::KEY_0, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::W, ModifierFlag::CONTROL_R, KeyCode::RUSSIAN_TILDE, ModifierFlag::SHIFT_R</autogen>
          <autogen>--KeyToKey-- KeyCode::Q, ModifierFlag::CONTROL_R, KeyCode::RUSSIAN_TILDE</autogen>
          <!-- only on Internal Apple keyboard -->
          <!-- because on Apple internal is swapped keycode with "key in front of Shift_L" and "key under escape" -->
          <block>
            <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0237</device_only>
            <autogen>--KeyToKey-- KeyCode::OPTION_R, KeyCode::CONTROL_R</autogen>
            <autogen>--KeyToKey-- KeyCode::RUSSIAN_PARAGRAPH, KeyCode::SEMICOLON, ModifierFlag::OPTION_R</autogen>
          </block>
          <!-- only on external keyboard -->
          <block>
            <device_not>DeviceVendor::APPLE_COMPUTER,DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x0237</device_not>
            <autogen>--KeyToKey-- KeyCode::RUSSIAN_TILDE, KeyCode::SEMICOLON, ModifierFlag::OPTION_R</autogen>
            <autogen>--KeyToKey-- KeyCode::RUSSIAN_PARAGRAPH, KeyCode::RUSSIAN_TILDE</autogen>
          </block>
        </item>
      </list>
    </item>
    <item>
      <name>For Finnish</name>
      <list>
        <item>
          <name>Command_L+Shift_L to Command_L+Shift_L (when inputmode == finnish)</name>
          <appendix>(+ When you type Command_L+Shift_L only, change inputmode to english)</appendix>
          <inputmode_only>FINNISH</inputmode_only>
          <identifier>remap.finnish_shiftcommandL2shiftLcommandL_english</identifier>
          <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_L, VK_COMMAND, KeyCode::SHIFT_L, ModifierFlag::COMMAND_L, KeyCode::VK_CHANGE_INPUTMODE_ENGLISH</autogen>
          <autogen>--KeyOverlaidModifier-- KeyCode::COMMAND_L, VK_SHIFT, KeyCode::COMMAND_L, ModifierFlag::SHIFT_L, KeyCode::VK_CHANGE_INPUTMODE_ENGLISH</autogen>
        </item>
        <item>
          <name>Command_L+Shift_L to Command_L+Shift_L</name>
          <appendix>(+ When you type Command_L+Shift_L only, change inputmode to finnish)</appendix>
          <!-- <inputmode_only>ENGLISH</inputmode_only> -->
          <identifier>remap.finnish_shiftcommandL2shiftLcommandL_finnish</identifier>
          <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_L, VK_COMMAND, KeyCode::SHIFT_L, ModifierFlag::COMMAND_L, KeyCode::VK_CHANGE_INPUTMODE_FINNISH</autogen>
          <autogen>--KeyOverlaidModifier-- KeyCode::COMMAND_L, VK_SHIFT, KeyCode::COMMAND_L, ModifierFlag::SHIFT_L, KeyCode::VK_CHANGE_INPUTMODE_FINNISH</autogen>
        </item>
      </list>
    </item>
    <item>
      <name>For French</name>
      <list>
        <item>
          <name>Change KeyPad Comma(,) to Dot(.)</name>
          <identifier>remap.french_keypad_comma_to_dot</identifier>
          <inputmode_only>FRENCH</inputmode_only>
          <autogen>--KeyToKey-- KeyCode::KEYPAD_DOT, KeyCode::KEYPAD_DOT, ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Swap $ and € on French</name>
          <identifier>remap.french_swap_dollar_and_euro</identifier>
          <inputmode_only>FRENCH</inputmode_only>
          <autogen>--KeyToKey-- KeyCode::FRENCH_DOLLAR, ModifierFlag::NONE,
            KeyCode::FRENCH_DOLLAR, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::FRENCH_DOLLAR, VK_OPTION | ModifierFlag::NONE,
            KeyCode::FRENCH_DOLLAR</autogen>
        </item>
        <item>
          <name>Shift_L to Shift_L</name>
          <appendix>(+ When you type Shift_L only, send Backslash)</appendix>
          <identifier>remap.french_shiftL2shiftL_backslash</identifier>
          <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_L, KeyCode::SHIFT_L, KeyCode::DOT, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Shift_R to Shift_R</name>
          <appendix>(+ When you type Shift_R only, send Backslash)</appendix>
          <identifier>remap.french_shiftR2shiftR_backslash</identifier>
          <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_R, KeyCode::SHIFT_R, KeyCode::DOT, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Option+Shift+4 to Left Brace, Option+Shift+Minus to Right Brace</name>
          <appendix>Option+5 to Quote, Option+Right Paren to Minus</appendix>
          <identifier>remap.french_swap_brackets_and_braces</identifier>
          <autogen>--KeyToKey-- KeyCode::KEY_4,        VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::KEY_5, ModifierFlag::OPTION_L</autogen>
          <autogen>--KeyToKey-- KeyCode::FRENCH_MINUS, VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::FRENCH_RIGHT_PAREN, ModifierFlag::OPTION_L</autogen>

          <autogen>--KeyToKey-- KeyCode::KEY_5,              VK_OPTION | ModifierFlag::NONE, KeyCode::KEY_4, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
          <autogen>--KeyToKey-- KeyCode::FRENCH_RIGHT_PAREN, VK_OPTION | ModifierFlag::NONE, KeyCode::FRENCH_MINUS, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Make MacBook AZERTY closer to the standard latin-9 mapping</name>
          <appendix>(For "French - Numerical" users)</appendix>
          <identifier>remap.french_azerty_to_latin9</identifier>
          <!-- - the key -/_ (where you put the brace), I would like to be =/+, that is, = on normal and + on SHIFT; -->
          <autogen>--KeyToKey-- KeyCode::FRENCH_MINUS, ModifierFlag::NONE, KeyCode::FRENCH_EQUAL</autogen>
          <autogen>--KeyToKey-- KeyCode::FRENCH_MINUS, VK_SHIFT | ModifierFlag::NONE, KeyCode::FRENCH_EQUAL, ModifierFlag::SHIFT_L</autogen>
          <!-- - the key 6, I would like to do -/6/|  (normal -, SHIFT 6, ALT+SHIFT |) -->
          <autogen>--KeyToKey-- KeyCode::KEY_6, ModifierFlag::NONE, KeyCode::FRENCH_MINUS</autogen>
          <autogen>--KeyToKey-- KeyCode::KEY_6, VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::L, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
          <!-- - the key =/+ I would like to be §/! -->
          <autogen>--KeyToKey-- KeyCode::FRENCH_EQUAL, ModifierFlag::NONE, KeyCode::KEY_6</autogen>
          <autogen>--KeyToKey-- KeyCode::FRENCH_EQUAL, VK_SHIFT | ModifierFlag::NONE, KeyCode::KEY_8</autogen>
          <!-- - ALT+SHIFT+2 gives ~ -->
          <autogen>--KeyToKey-- KeyCode::KEY_2, VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::N, ModifierFlag::OPTION_L</autogen>
          <!-- - ALT+SHIFT+3 gives # -->
          <autogen>--KeyToKey-- KeyCode::KEY_3, VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::BACKSLASH, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Forgiving open brackets binding.</name>
          <appendix>Command+4 to Left Brace, Command+5 to Left Bracket</appendix>
          <identifier>remap.french_brackets_hack</identifier>
          <!-- command+4 to { -->
          <autogen>--KeyToKey-- KeyCode::KEY_4, VK_COMMAND | ModifierFlag::NONE, KeyCode::KEY_5, ModifierFlag::OPTION_L</autogen>
          <!-- command+5 to [ -->
          <autogen>--KeyToKey-- KeyCode::KEY_5, VK_COMMAND | ModifierFlag::NONE, KeyCode::KEY_5, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Command_L+Circonflexe(^) to ´(Option+Shift+1)</name>
          <identifier>remap.french_commandLhat2optionshift1</identifier>
          <autogen>--KeyToKey-- KeyCode::FRENCH_HAT, ModifierFlag::COMMAND_L | ModifierFlag::NONE, KeyCode::KEY_1, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Command_R+Circonflexe(^) to ´(Option+Shift+1)</name>
          <identifier>remap.french_commandRhat2optionshift1</identifier>
          <autogen>--KeyToKey-- KeyCode::FRENCH_HAT, ModifierFlag::COMMAND_R | ModifierFlag::NONE, KeyCode::KEY_1, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Dvorak and bépo: Command_R to Option_R</name>
          <identifier>remap.french_inputmode_dvorak_bepo_command_r_to_option_r</identifier>
          <inputmode_only>DVORAK,BEPO</inputmode_only>
          <autogen>--KeyToKey-- KeyCode::COMMAND_R, KeyCode::OPTION_R</autogen>
        </item>
        <item>
          <name>French PC keyboard layout</name>
          <appendix>Change 6 to -</appendix>
          <appendix>Change 8 to _</appendix>
          <appendix>...</appendix>
          <identifier>remap.pc_french_keyboard_layout</identifier>
          <!-- KEY_6 to '-' -->
          <autogen>--KeyToKey-- KeyCode::KEY_6, ModifierFlag::NONE, KeyCode::EQUAL</autogen>
          <!-- KEY_8 to '_' -->
          <autogen>--KeyToKey-- KeyCode::KEY_8, ModifierFlag::NONE, KeyCode::EQUAL, ModifierFlag::SHIFT_R</autogen>
          <!-- EQUAL to '=' -->
          <autogen>--KeyToKey-- KeyCode::EQUAL, ModifierFlag::NONE, KeyCode::SLASH, ModifierFlag::NONE</autogen>
          <!-- EQUAL + Right Shift to '+' -->
          <autogen>--KeyToKey-- KeyCode::EQUAL, ModifierFlag::SHIFT_R, KeyCode::SLASH, ModifierFlag::SHIFT_R</autogen>
          <!-- ExclamationMark(SLASH) to '!' -->
          <autogen>--KeyToKey-- KeyCode::SLASH, ModifierFlag::NONE, KeyCode::KEY_8, ModifierFlag::NONE</autogen>
          <!-- MultiplySign(BackSlash) to '*' -->
          <autogen>--KeyToKey-- KeyCode::BACKSLASH, ModifierFlag::NONE, KeyCode::KEYPAD_MULTIPLY, ModifierFlag::NONE</autogen>
          <!-- KEY_2 + AltGr to '~' -->
          <autogen>--KeyToKey-- KeyCode::KEY_2, ModifierFlag::OPTION_R, KeyCode::N, ModifierFlag::OPTION_R</autogen>
          <!-- KEY_3 + AltGr to '#' -->
          <autogen>--KeyToKey-- KeyCode::KEY_3, ModifierFlag::OPTION_R, KeyCode::UK_SECTION, ModifierFlag::SHIFT_R</autogen>
          <!-- KEY_4 + AltGr to '{' -->
          <autogen>--KeyToKey-- KeyCode::KEY_4, ModifierFlag::OPTION_R, KeyCode::KEY_5, ModifierFlag::OPTION_R</autogen>
          <!-- KEY_5 + AltGr to '[' -->
          <autogen>--KeyToKey-- KeyCode::KEY_5, ModifierFlag::OPTION_R, KeyCode::KEY_5, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R</autogen>
          <!-- KEY_6 + AltGr to '|' -->
          <autogen>--KeyToKey-- KeyCode::KEY_6, ModifierFlag::OPTION_R, KeyCode::L, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R</autogen>
          <!-- KEY_7 + AltGr to '`' -->
          <autogen>--KeyToKey-- KeyCode::KEY_7, ModifierFlag::OPTION_R, KeyCode::BACKSLASH</autogen>
          <!-- KEY_8 + AltGr to '\' -->
          <autogen>--KeyToKey-- KeyCode::KEY_8, ModifierFlag::OPTION_R, KeyCode::DOT, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R</autogen>
          <!-- KEY_0 + AltGr to '@' -->
          <autogen>--KeyToKey-- KeyCode::KEY_0, ModifierFlag::OPTION_R, KeyCode::UK_SECTION, ModifierFlag::NONE</autogen>
          <!-- MINUS + AltGr to ']' -->
          <autogen>--KeyToKey-- KeyCode::MINUS, ModifierFlag::OPTION_R, KeyCode::MINUS, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R</autogen>
          <!-- EQUAL + AltGr to '}' -->
          <autogen>--KeyToKey-- KeyCode::EQUAL, ModifierFlag::OPTION_R, KeyCode::MINUS, ModifierFlag::OPTION_R</autogen>
          <!-- KEYPAD_DOT to '.' -->
          <autogen>--KeyToKey-- KeyCode::KEYPAD_DOT, ModifierFlag::NONE, KeyCode::COMMA, ModifierFlag::SHIFT_R</autogen>
        </item>
      </list>
    </item>
    <item>
      <name>For German</name>
      <list>
        <item>
          <name>Adapt Option_R to PC's AltGr (1)</name>
          <identifier>remap.german_adapt_option_r_to_pcs_altgr_1</identifier>
          <appendix>---------------------------------------</appendix>
          <appendix>Change Option_R+7 to {</appendix>
          <appendix>Change Option_R+8 to [</appendix>
          <appendix>Change Option_R+9 to ]</appendix>
          <appendix>Change Option_R+0 to }</appendix>
          <autogen>--KeyToKey-- KeyCode::KEY_8, ModifierFlag::OPTION_R, KeyCode::KEY_5, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::KEY_9, ModifierFlag::OPTION_R, KeyCode::KEY_6, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::KEY_7, ModifierFlag::OPTION_R, KeyCode::KEY_8, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::KEY_0, ModifierFlag::OPTION_R, KeyCode::KEY_9, ModifierFlag::OPTION_R</autogen>
          <appendix>---------------------------------------</appendix>
        </item>
        <item>
          <name>Adapt Option_R to PC's AltGr (2)</name>
          <identifier>remap.german_adapt_option_r_to_pcs_altgr_2</identifier>
          <appendix>Change Option_R+'Q' to Option_R+'L' ( '@' )</appendix>
          <appendix>Change Option_R+'+' to Option_R+'N' ( '~' )</appendix>
          <autogen>--KeyToKey-- KeyCode::Q, ModifierFlag::OPTION_R, KeyCode::L, ModifierFlag::OPTION_R</autogen>
          <autogen>--KeyToKey-- KeyCode::BRACKET_RIGHT, ModifierFlag::OPTION_R, KeyCode::N, ModifierFlag::OPTION_R</autogen>
        </item>
        <item><name>------------------------------------------------------------</name></item>
        <item>
          <name>Option+7 to {</name>
          <identifier>remap.german_option7_to_left_brace</identifier>
          <autogen>--KeyToKey-- KeyCode::KEY_7, VK_OPTION, KeyCode::KEY_8, VK_OPTION</autogen>
        </item>
        <item>
          <name>Option+8 to [</name>
          <identifier>remap.german_option8_to_left_bracket</identifier>
          <autogen>--KeyToKey-- KeyCode::KEY_8, VK_OPTION, KeyCode::KEY_5, VK_OPTION</autogen>
        </item>
        <item>
          <name>Option+9 to ]</name>
          <identifier>remap.german_option9_to_right_bracket</identifier>
          <autogen>--KeyToKey-- KeyCode::KEY_9, VK_OPTION, KeyCode::KEY_6, VK_OPTION</autogen>
        </item>
        <item>
          <name>Option+0 to }</name>
          <identifier>remap.german_option0_to_right_brace</identifier>
          <autogen>--KeyToKey-- KeyCode::KEY_0, VK_OPTION, KeyCode::KEY_9, VK_OPTION</autogen>
        </item>
        <item><name>------------------------------------------------------------</name></item>
        <item>
          <name>Control+Ö to {</name>
          <identifier>remap.german_controlO_to_left_brace</identifier>
          <autogen>--KeyToKey-- KeyCode::SEMICOLON, VK_CONTROL, KeyCode::KEY_8, VK_OPTION</autogen>
        </item>
        <item>
          <name>Command+Ö to [</name>
          <identifier>remap.german_commandO_to_left_bracket</identifier>
          <autogen>--KeyToKey-- KeyCode::SEMICOLON, VK_COMMAND, KeyCode::KEY_5, VK_OPTION</autogen>
        </item>
        <item>
          <name>Command+Ä to ]</name>
          <identifier>remap.german_commandA_to_right_bracket</identifier>
          <autogen>--KeyToKey-- KeyCode::QUOTE, VK_COMMAND, KeyCode::KEY_6, VK_OPTION</autogen>
        </item>
        <item>
          <name>Control+Ä to }</name>
          <identifier>remap.german_controlA_to_left_brace</identifier>
          <autogen>--KeyToKey-- KeyCode::QUOTE, VK_CONTROL, KeyCode::KEY_9, VK_OPTION</autogen>
        </item>
        <item><name>------------------------------------------------------------</name></item>
        <item>
          <name>Control+PLUS to ~</name>
          <identifier>remap.german_controlPlus_to_tilde</identifier>
          <autogen>--KeyToKey-- KeyCode::BRACKET_RIGHT, VK_CONTROL, KeyCode::N, VK_OPTION</autogen>
        </item>
        <item>
          <name>Option+PLUS to ~</name>
          <identifier>remap.german_optionPlus_to_tilde</identifier>
          <autogen>--KeyToKey-- KeyCode::BRACKET_RIGHT, VK_OPTION, KeyCode::N, VK_OPTION</autogen>
        </item>
        <item>
          <name>Command+MINUS to Backslash(\)</name>
          <identifier>remap.german_commandMinus_to_backslash</identifier>
          <autogen>--KeyToKey-- KeyCode::SLASH, VK_COMMAND, KeyCode::KEY_7, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Control+MINUS to Slash(/)</name>
          <identifier>remap.german_controlMinus_to_slash</identifier>
          <autogen>--KeyToKey-- KeyCode::SLASH, VK_CONTROL, KeyCode::KEY_7, ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Option+ß to Backslash(\)</name>
          <identifier>remap.german_optionbeta2backslash</identifier>
          <autogen>--KeyToKey-- KeyCode::MINUS, VK_OPTION, KeyCode::KEY_7, ModifierFlag::SHIFT_L | VK_OPTION</autogen>
        </item>
        <item>
          <name>Option+Q to @</name>
          <identifier>remap.german_optionQ2atmark</identifier>
          <autogen>--KeyToKey-- KeyCode::Q, VK_OPTION, KeyCode::L, VK_OPTION</autogen>
        </item>
        <item>
          <name>Quote(´) to Forward Delete</name>
          <identifier>remap.german_quote2forwarddelete</identifier>
          <autogen>--KeyToKey-- KeyCode::GERMAN_QUOTE, KeyCode::FORWARD_DELETE</autogen>
        </item>
        <item>
          <name>Command+Ü to |</name>
          <identifier>remap.german_commandU2pipe</identifier>
          <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, VK_COMMAND, KeyCode::KEY_7, ModifierFlag::OPTION_L</autogen>
        </item>
        <item>
          <name>Control+Ü to @</name>
          <identifier>remap.german_controlU2atmark</identifier>
          <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, VK_CONTROL, KeyCode::L, ModifierFlag::OPTION_L</autogen>
        </item>
        <item>
          <name>Option+Less-Than(&lt;) to |</name>
          <identifier>remap.german_optionLessthan_to_pipe</identifier>
          <autogen>--KeyToKey-- KeyCode::GERMAN_LESS_THAN, VK_OPTION, KeyCode::KEY_7, VK_OPTION</autogen>
        </item>
        <item>
          <name>Swap Circumflex(^) and Less-Than(&lt;)</name>
          <identifier>remap.german_swap_circumflex_lessthan</identifier>
          <autogen>--KeyToKey-- KeyCode::GERMAN_CIRCUMFLEX, KeyCode::GERMAN_LESS_THAN</autogen>
          <autogen>--KeyToKey-- KeyCode::GERMAN_LESS_THAN, KeyCode::GERMAN_CIRCUMFLEX</autogen>
        </item>
        <item>
          <name>Swap Circumflex(^) and Less-Than(&lt;)</name>
          <appendix>(only in virtual machine)</appendix>
          <identifier>remap.german_swap_circumflex_lessthan_vm</identifier>
          <only>VIRTUALMACHINE</only>
          <autogen>--KeyToKey-- KeyCode::GERMAN_CIRCUMFLEX, KeyCode::GERMAN_LESS_THAN</autogen>
          <autogen>--KeyToKey-- KeyCode::GERMAN_LESS_THAN, KeyCode::GERMAN_CIRCUMFLEX</autogen>
        </item>
        <item>
          <name>Swap Circumflex(^) and Less-Than(&lt;) on PC Keyboard</name>
          <appendix>(+ Option+Less-Than(&lt;) to Pipe(|))</appendix>
          <identifier>remap.german_swap_circumflex_lessthan_pckeyboard</identifier>
          <not>VIRTUALMACHINE</not>
          <autogen>--KeyToKey-- KeyCode::GERMAN_PC_LESS_THAN, VK_OPTION | ModifierFlag::NONE,
            KeyCode::KEY_7, VK_OPTION</autogen>
          <autogen>--KeyToKey-- KeyCode::GERMAN_PC_LESS_THAN, KeyCode::GERMAN_LESS_THAN</autogen>
          <autogen>--KeyToKey-- KeyCode::GERMAN_LESS_THAN,    KeyCode::GERMAN_CIRCUMFLEX</autogen>
        </item>
        <item>
          <name>Change Command+Q to @ (Option_L+L)</name>
          <list>
            <item>
              <name>Command_L+Q to @</name>
              <identifier>remap.german_commandLQ2optionLL</identifier>
              <autogen>--KeyToKey-- KeyCode::Q, ModifierFlag::COMMAND_L, KeyCode::L, ModifierFlag::OPTION_L</autogen>
            </item>
            <item>
              <name>Command_R+Q to @</name>
              <identifier>remap.german_commandRQ2optionLL</identifier>
              <autogen>--KeyToKey-- KeyCode::Q, ModifierFlag::COMMAND_R, KeyCode::L, ModifierFlag::OPTION_L</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>map Developer Keyboard Layout</name>
          <list>
            <item>
              <name>map square bracket to PC Layout</name>
              <appendix>move Command_R + 8 to Option_L + 5</appendix>
              <appendix>move Command_R + 9 to Option_L + 6</appendix>
              <identifier>remap.german_map_square_bracket</identifier>
              <autogen>--KeyToKey-- KeyCode::KEY_8, ModifierFlag::COMMAND_R, KeyCode::KEY_5, ModifierFlag::OPTION_L</autogen>
              <autogen>--KeyToKey-- KeyCode::KEY_9, ModifierFlag::COMMAND_R, KeyCode::KEY_6, ModifierFlag::OPTION_L</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>NEO Keyboard Layout Fixes</name>
          <appendix>BACKSLASH (#) to OPTION_R</appendix>
          <appendix></appendix>
          <appendix>// To change CAPSLOCK to OPTION_L,</appendix>
          <appendix>// install PCKeyboardHack and change CapsLock keycode to 58.</appendix>
          <identifier>remap.german_neo</identifier>
          <autogen>--KeyToKey-- KeyCode::BACKSLASH, KeyCode::OPTION_R</autogen>
        </item>
        <item>
          <name>Umlaute 4 Programmierung umschreiben</name>
          <appendix>ä to ae</appendix>
          <appendix>ö to oe</appendix>
          <appendix>ü to ue</appendix>
          <identifier>remap.german_a_to_ae</identifier>
          <!-- ä to ae -->
          <autogen>--KeyToKey-- KeyCode::QUOTE,           KeyCode::A,           KeyCode::E</autogen>
          <!-- Ä to AE -->
          <autogen>--KeyToKey-- KeyCode::QUOTE, VK_SHIFT, KeyCode::A, VK_SHIFT, KeyCode::E, VK_SHIFT</autogen>
          <!-- ö to oe -->
          <autogen>--KeyToKey-- KeyCode::SEMICOLON,           KeyCode::O,           KeyCode::E</autogen>
          <!-- Ö to OE -->
          <autogen>--KeyToKey-- KeyCode::SEMICOLON, VK_SHIFT, KeyCode::O, VK_SHIFT, KeyCode::E, VK_SHIFT</autogen>
          <!-- ü to ue -->
          <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT,           KeyCode::U,           KeyCode::E</autogen>
          <!-- Ü to UE -->
          <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, VK_SHIFT, KeyCode::U, VK_SHIFT, KeyCode::E, VK_SHIFT</autogen>
        </item>
        <item>
          <name>German Umlaute on US Keyboard Layout</name>
          <appendix>Change Option_R+; to ö</appendix>
          <appendix>Change Option_R+' to ä</appendix>
          <appendix>Change Option_R+[ to ü</appendix>
          <appendix>Change Option_R+- to ß</appendix>
          <identifier>remap.org.openhort.german_umlaute_on_en_US</identifier>

          <autogen>--KeyToKey--
            KeyCode::SEMICOLON, ModifierFlag::OPTION_R | VK_SHIFT | ModifierFlag::NONE,
            KeyCode::U, ModifierFlag::OPTION_R, KeyCode::O, VK_SHIFT
          </autogen>
          <autogen>--KeyToKey--
            KeyCode::SEMICOLON, ModifierFlag::OPTION_R | ModifierFlag::NONE,
            KeyCode::U, ModifierFlag::OPTION_R, KeyCode::O
          </autogen>

          <autogen>--KeyToKey--
            KeyCode::QUOTE, ModifierFlag::OPTION_R | VK_SHIFT | ModifierFlag::NONE,
            KeyCode::U, ModifierFlag::OPTION_R, KeyCode::A, VK_SHIFT
          </autogen>
          <autogen>--KeyToKey--
            KeyCode::QUOTE, ModifierFlag::OPTION_R | ModifierFlag::NONE,
            KeyCode::U, ModifierFlag::OPTION_R, KeyCode::A
          </autogen>

          <autogen>--KeyToKey--
            KeyCode::BRACKET_LEFT, ModifierFlag::OPTION_R | VK_SHIFT | ModifierFlag::NONE,
            KeyCode::U, ModifierFlag::OPTION_R, KeyCode::U, VK_SHIFT
          </autogen>
          <autogen>--KeyToKey--
            KeyCode::BRACKET_LEFT, ModifierFlag::OPTION_R | ModifierFlag::NONE,
            KeyCode::U, ModifierFlag::OPTION_R, KeyCode::U
          </autogen>

          <autogen>--KeyToKey--
            KeyCode::MINUS, ModifierFlag::OPTION_R | ModifierFlag::NONE,
            KeyCode::S, ModifierFlag::OPTION_R
          </autogen>
        </item>
      </list>
    </item>
    <item>
      <name>For Italian</name>
      <list>
        <item>
          <name>Exchange Backslash(\) and Less-Than(&lt;)</name>
          <identifier>remap.italian_exchange_backslash_less_than</identifier>
          <autogen>--KeyToKey-- KeyCode::ITALIAN_BACKSLASH, KeyCode::ITALIAN_LESS_THAN</autogen>
          <autogen>--KeyToKey-- KeyCode::ITALIAN_LESS_THAN, KeyCode::ITALIAN_BACKSLASH</autogen>
        </item>
        <item>
          <name>Option+AEIUO to àèìùò on "Italian Input Source"</name>
          <identifier>remap.italian_optionAEIUO_grave_italian</identifier>
          <autogen>--KeyToKey-- KeyCode::A, VK_OPTION, KeyCode::KEY_0, ModifierFlag::OPTION_L, KeyCode::A</autogen>
          <autogen>--KeyToKey-- KeyCode::E, VK_OPTION, KeyCode::KEY_0, ModifierFlag::OPTION_L, KeyCode::E</autogen>
          <autogen>--KeyToKey-- KeyCode::I, VK_OPTION, KeyCode::KEY_0, ModifierFlag::OPTION_L, KeyCode::I</autogen>
          <autogen>--KeyToKey-- KeyCode::U, VK_OPTION, KeyCode::KEY_0, ModifierFlag::OPTION_L, KeyCode::U</autogen>
          <autogen>--KeyToKey-- KeyCode::O, VK_OPTION, KeyCode::KEY_0, ModifierFlag::OPTION_L, KeyCode::O</autogen>
        </item>
        <item>
          <name>Option+AEIUO to àèìùò on "U.S. Input Source"</name>
          <identifier>remap.italian_optionAEIUO_grave_us</identifier>
          <autogen>--KeyToKey-- KeyCode::A, VK_OPTION, KeyCode::BACKQUOTE, ModifierFlag::OPTION_L, KeyCode::A</autogen>
          <autogen>--KeyToKey-- KeyCode::E, VK_OPTION, KeyCode::BACKQUOTE, ModifierFlag::OPTION_L, KeyCode::E</autogen>
          <autogen>--KeyToKey-- KeyCode::I, VK_OPTION, KeyCode::BACKQUOTE, ModifierFlag::OPTION_L, KeyCode::I</autogen>
          <autogen>--KeyToKey-- KeyCode::U, VK_OPTION, KeyCode::BACKQUOTE, ModifierFlag::OPTION_L, KeyCode::U</autogen>
          <autogen>--KeyToKey-- KeyCode::O, VK_OPTION, KeyCode::BACKQUOTE, ModifierFlag::OPTION_L, KeyCode::O</autogen>
        </item>
        <item>
          <name>KeyPad Comma(,) to Dot(.) on "Italian Pro Input Source"</name>
          <identifier>remap.italian_keypadcomma2dot</identifier>
          <!-- ITALIAN_KEYPAD_COMMA is 0x41 (== KEYPAD_DOT) -->
          <autogen>--KeyToKey-- KeyCode::KEYPAD_DOT, KeyCode::DOT</autogen>
        </item>
      </list>
    </item>
    <include system_xml_path="include/checkbox/japanese.xml" />
    <item>
      <name>For Korean</name>
      <list>
        <item>
          <name>Change HanEng And Hanja Key</name>
          <list>
            <item>
              <name>Toggle HanEng Key(to Command_L(R)+Space)</name>
              <identifier>remap.ksc_haneng2commandLSpace</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::JIS_KANA, KeyCode::COMMAND_L, KeyCode::SPACE, ModifierFlag::COMMAND_R</autogen>
            </item>
            <item>
              <name>Toggle Hanja Key(to Option_L(R)+Return)</name>
              <identifier>remap.ksc_hanja2optionLreturn</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::JIS_EISUU, KeyCode::OPTION_L, KeyCode::RETURN, ModifierFlag::OPTION_R</autogen>
            </item>
            <item>
              <name>Toggle Option_R(Alt_R) Key(to Option_L(R)+Enter)</name>
              <identifier>remap.ksc_optionR2optionLreturn</identifier>
              <autogen>--KeyToKey-- KeyCode::OPTION_R, KeyCode::ENTER, ModifierFlag::OPTION_L</autogen>
            </item>
          </list>
        </item>
      </list>
    </item>
    <item>
      <name>For Russian</name>
      <list>
        <item>
          <name>Change Backquote(`) Key</name>
          <list>
            <item>
              <name>Backquote(`) to Paragraph(§)</name>
              <identifier>remap.russian_backquote2paragraph</identifier>
              <autogen>--KeyToKey-- KeyCode::BACKQUOTE, KeyCode::RUSSIAN_PARAGRAPH</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Change Command_L Key</name>
          <list>
            <item>
              <name>Command_L to Command_L</name>
              <appendix>(+ When you type Command_L only, change inputmode to english)</appendix>
              <identifier>remap.russian_commandL2commandL_english</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::COMMAND_L, KeyCode::COMMAND_L, KeyCode::VK_CHANGE_INPUTMODE_ENGLISH</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Change Command_R Key</name>
          <list>
            <item>
              <name>Command_R to Command_R</name>
              <appendix>(+ When you type Command_R only, change inputmode to russian)</appendix>
              <identifier>remap.russian_commandR2commandR_russian</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::VK_CHANGE_INPUTMODE_RUSSIAN</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Change Paragraph(§) Key</name>
          <list>
            <item>
              <name>Paragraph(§) to 1</name>
              <identifier>remap.russian_paragraph2one</identifier>
              <autogen>--KeyToKey-- KeyCode::RUSSIAN_PARAGRAPH, KeyCode::KEY_1</autogen>
            </item>
            <item>
              <name>Paragraph(§) to Backquote(`)</name>
              <identifier>remap.russian_paragraph2backquote</identifier>
              <autogen>--KeyToKey-- KeyCode::RUSSIAN_PARAGRAPH, KeyCode::BACKQUOTE</autogen>
            </item>
            <item>
              <name>Paragraph(§) to Escape</name>
              <identifier>remap.russian_paragraph2escape</identifier>
              <autogen>--KeyToKey-- KeyCode::RUSSIAN_PARAGRAPH, KeyCode::ESCAPE</autogen>
            </item>
            <item>
              <name>Paragraph(§) to Forward Delete</name>
              <identifier>remap.russian_paragraph2forwarddelete</identifier>
              <autogen>--KeyToKey-- KeyCode::RUSSIAN_PARAGRAPH, KeyCode::FORWARD_DELETE</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Change Shift_L Key</name>
          <list>
            <item>
              <name>Shift_L to Shift_L</name>
              <appendix>(+ When you type Shift_L only, change inputmode to english)</appendix>
              <identifier>remap.russian_shiftL2shiftL_english</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_L, KeyCode::SHIFT_L, KeyCode::VK_CHANGE_INPUTMODE_ENGLISH</autogen>
            </item>
            <item>
              <name>Shift_L to Shift_L</name>
              <appendix>(+ When you type Shift_L only, change inputmode to english)</appendix>
              <appendix></appendix>
              <appendix>(+ When you type Command+Shift_L only,</appendix>
              <appendix>change inputmode to "English - Ilya Birman Typography".)</appendix>
              <identifier>remap.russian_shiftL2shiftL_english_typography</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_L, VK_COMMAND, KeyCode::SHIFT_L, ModifierFlag::COMMAND_L, KeyCode::VK_CHANGE_INPUTMODE_ENGLISH_TYPOGRAPHIC</autogen>
              <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_L,             KeyCode::SHIFT_L,                          KeyCode::VK_CHANGE_INPUTMODE_ENGLISH</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Change Shift_R Key</name>
          <list>
            <item>
              <name>Shift_R to Shift_R</name>
              <appendix>(+ When you type Shift_R only, change inputmode to russian)</appendix>
              <identifier>remap.russian_shiftR2shiftR_russian</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_R, KeyCode::SHIFT_R, KeyCode::VK_CHANGE_INPUTMODE_RUSSIAN</autogen>
            </item>
            <item>
              <name>Shift_R to Shift_R</name>
              <appendix>(+ When you type Shift_R only, change inputmode to russian)</appendix>
              <appendix></appendix>
              <appendix>(+ When you type Command+Shift_R only,</appendix>
              <appendix>change inputmode to "Russian - Ilya Birman Typography".)</appendix>
              <identifier>remap.russian_shiftR2shiftR_russian_typography</identifier>
              <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_R, VK_COMMAND, KeyCode::SHIFT_R, ModifierFlag::COMMAND_L, KeyCode::VK_CHANGE_INPUTMODE_RUSSIAN_TYPOGRAPHIC</autogen>
              <autogen>--KeyOverlaidModifier-- KeyCode::SHIFT_R,             KeyCode::SHIFT_R,                          KeyCode::VK_CHANGE_INPUTMODE_RUSSIAN</autogen>
            </item>
          </list>
        </item>
        <item>
          <name>Change Tilde(~) Key</name>
          <list>
            <item>
              <name>Tilde(~) to Shift_L</name>
              <identifier>remap.russian_tilda2shiftL</identifier>
              <autogen>--KeyToKey-- KeyCode::RUSSIAN_TILDE, KeyCode::SHIFT_L</autogen>
            </item>
          </list>
        </item>

        <item>
          <name>Change Option_R+,(≤) to Comma(,) Key for Russian</name>
          <identifier>remap.change_option_r_plus_comma_to_comma_for_russian</identifier>
          <autogen>--KeyToKey-- KeyCode::COMMA, ModifierFlag::OPTION_R,
            KeyCode::KEY_6, VK_SHIFT</autogen>
        </item>
        <item>
          <name>Change Option_R+.(≥) to Dot(.) Key for Russian</name>
          <identifier>remap.change_option_r_plus_dot_to_dot_for_russian</identifier>
          <autogen>--KeyToKey-- KeyCode::DOT, ModifierFlag::OPTION_R,
            KeyCode::KEY_7, VK_SHIFT</autogen>
        </item>
      </list>
    </item>
    <item>
      <name>For Slovenian</name>
      <list>
        <item>
          <name>Remap keyboard (symbol) shortcuts to standard Windows/Linux style</name>
          <appendix>(important characters only)</appendix>
          <appendix></appendix>
          <identifier>remap.slovenian_win_style_shortcuts</identifier>

          <inputmode_only>SLOVENIAN</inputmode_only>

          <appendix>Option_R (AltGr) + 1 = ~</appendix>
          <autogen>--KeyToKey-- KeyCode::KEY_1, ModifierFlag::OPTION_R,
            KeyCode::N, ModifierFlag::OPTION_L</autogen>

          <appendix>Option_R (AltGr) + 5 = °</appendix>
          <autogen>--KeyToKey-- KeyCode::KEY_5, ModifierFlag::OPTION_R,
            KeyCode::KEY_8, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L</autogen>

          <appendix>Shift_L + 7 = / and / = ' (plus hack for ? - second line)</appendix>
          <autogen>--KeyToKey-- KeyCode::KEY_7, VK_SHIFT,
            KeyCode::MINUS</autogen>
          <autogen>--KeyToKey-- KeyCode::MINUS, VK_SHIFT,
            KeyCode::MINUS, VK_SHIFT</autogen>
          <autogen>--KeyToKey-- KeyCode::MINUS,
            KeyCode::KEY_7, ModifierFlag::SHIFT_L</autogen>

          <appendix>Key between Y and Shift_L = &lt; &gt;</appendix>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, VK_SHIFT,
            KeyCode::RUSSIAN_TILDE, ModifierFlag::SHIFT_L</autogen>
          <autogen>--KeyToKey-- KeyCode::UK_SECTION, KeyCode::RUSSIAN_TILDE</autogen>

          <appendix>Option_R (AltGr) + Q = \</appendix>
          <autogen>--KeyToKey-- KeyCode::Q, ModifierFlag::OPTION_R,
            KeyCode::BACKSLASH, ModifierFlag::OPTION_L</autogen>

          <appendix>Option_R (AltGr) + W = |</appendix>
          <autogen>--KeyToKey-- KeyCode::W, ModifierFlag::OPTION_R,
            KeyCode::BACKSLASH, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L</autogen>

          <appendix>Option_R (AltGr) + E = €</appendix>
          <autogen>--KeyToKey-- KeyCode::E, ModifierFlag::OPTION_R,
            KeyCode::KEY_5, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L</autogen>

          <appendix>Option_R (AltGr) + F = [ ... Option_R (AltGr) + G = ]</appendix>
          <autogen>--KeyToKey-- KeyCode::F, ModifierFlag::OPTION_R,
            KeyCode::BRACKET_LEFT, ModifierFlag::OPTION_L</autogen>
          <autogen>--KeyToKey-- KeyCode::G, ModifierFlag::OPTION_R,
            KeyCode::BRACKET_RIGHT, ModifierFlag::OPTION_L</autogen>

          <appendix>Option_R (AltGr) + V = @</appendix>
          <autogen>--KeyToKey-- KeyCode::V, ModifierFlag::OPTION_R,
            KeyCode::KEY_2, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L</autogen>

          <appendix>Option_R (AltGr) + B = { ... Option_R (AltGr) + N = }</appendix>
          <autogen>--KeyToKey-- KeyCode::B, ModifierFlag::OPTION_R,
            KeyCode::BRACKET_LEFT, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L</autogen>

          <autogen>--KeyToKey-- KeyCode::N, ModifierFlag::OPTION_R,
            KeyCode::BRACKET_RIGHT, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L</autogen>
        </item>
      </list>
    </item>

    <item>
      <name>For Spanish</name>
      <list>
        <item>
          <name>Change Option_R+4 to Ñ (Option_R+;)</name>
          <identifier>remap.pc_applicationoption4n</identifier>
          <autogen>--KeyToKey-- KeyCode::KEY_4, ModifierFlag::OPTION_R, KeyCode::SEMICOLON, ModifierFlag::OPTION_R</autogen>
        </item>
        <item>
          <name>Swap Ordinal-indicator(º) and Less-Than(&lt;)</name>
          <identifier>remap.spanish_swap_ordinal_indicator_lessthan</identifier>
          <autogen>--KeyToKey-- KeyCode::SPANISH_ORDINAL_INDICATOR, KeyCode::SPANISH_LESS_THAN</autogen>
          <autogen>--KeyToKey-- KeyCode::SPANISH_LESS_THAN, KeyCode::SPANISH_ORDINAL_INDICATOR</autogen>
        </item>
      </list>
    </item>
    <item>
      <name>For Swedish</name>
      <list>
        <item>
          <name>Space to Option_L (when inputmode == swedish)</name>
          <identifier>remap.swedish_space2optionL_swedish</identifier>
          <inputmode_only>SWEDISH</inputmode_only>
          <autogen>--KeyToKey-- KeyCode::SPACE, KeyCode::OPTION_L</autogen>
        </item>
        <item>
          <name>Command_L to Command_L</name>
          <appendix>(+ When you type Command_L only, change inputmode to english)</appendix>
          <identifier>remap.swedish_commandL2commandL_english</identifier>
          <autogen>--KeyOverlaidModifier-- KeyCode::COMMAND_L, KeyCode::COMMAND_L, KeyCode::VK_CHANGE_INPUTMODE_ENGLISH</autogen>
        </item>
        <item>
          <name>Command_R to Command_R</name>
          <appendix>(+ When you type Command_R only, change inputmode to swedish)</appendix>
          <identifier>remap.swedish_commandR2commandR_swedish</identifier>
          <autogen>--KeyOverlaidModifier-- KeyCode::COMMAND_R, KeyCode::COMMAND_R, KeyCode::VK_CHANGE_INPUTMODE_SWEDISH</autogen>
        </item>
        <item>
          <name>Swap Section(§) and Less-Than(&lt;)</name>
          <appendix>(only in virtual machine)</appendix>
          <identifier>remap.swedish_swap_section_lessthan_vm</identifier>
          <only>VIRTUALMACHINE</only>
          <autogen>--KeyToKey-- KeyCode::SWEDISH_SECTION, KeyCode::SWEDISH_LESS_THAN</autogen>
          <autogen>--KeyToKey-- KeyCode::SWEDISH_LESS_THAN, KeyCode::SWEDISH_SECTION</autogen>
        </item>
      </list>
    </item>
    <item>
      <name>For Swiss</name>
      <list>
        <item>
          <name>Swap Y and Z</name>
          <identifier>remap.swiss_swap_y_z</identifier>
          <autogen>--KeyToKey-- KeyCode::Y, KeyCode::Z</autogen>
          <autogen>--KeyToKey-- KeyCode::Z, KeyCode::Y</autogen>
        </item>
        <item>
          <name>Swap Section(§) and Less-Than(&lt;)</name>
          <appendix>(only in virtual machine)</appendix>
          <identifier>remap.swiss_swap_section_lessthan_vm</identifier>
          <only>VIRTUALMACHINE</only>
          <autogen>--KeyToKey-- KeyCode::SWISS_SECTION, KeyCode::SWISS_LESS_THAN</autogen>
          <autogen>--KeyToKey-- KeyCode::SWISS_LESS_THAN, KeyCode::SWISS_SECTION</autogen>
        </item>
        <item>
          <name>Change Section(§) to SHIFT+PC_INSERT</name>
          <appendix>(only in Citrix Online Plug-in for Mac)</appendix>
          <identifier>remap.swiss_section_insert_citrix</identifier>
          <only>CITRIX_ONLINE_PLUG_IN</only>
          <autogen>--KeyToKey-- KeyCode::SWISS_SECTION, KeyCode::PC_INSERT, ModifierFlag::SHIFT_L</autogen>
        </item>
        <item>
          <name>Change AltGr+2 to @</name>
          <appendix>(When Input Source is Swiss French or Swiss German)</appendix>
          <identifier>remap.altgr_2_to_atmark</identifier>
          <inputmode_only>SWISS</inputmode_only>
          <autogen>
            --KeyToKey--
            KeyCode::KEY_2, VK_OPTION | ModifierFlag::NONE,
            <!-- @ == option+g -->
            KeyCode::G, VK_OPTION
          </autogen>
        </item>
      </list>
    </item>

    <include system_xml_path="include/checkbox/samples.xml" />
  </list>
</root>
