#!/usr/bin/ruby

Dir.chdir(File.dirname($0))

def get_modifiers(target_modifier)
  modifiers = ['COMMAND',
               'CONTROL',
               'FN',
               'OPTION',
               'SHIFT',
              ]
  # drop target_modifier from modifiers
  modifiers.delete(target_modifier)

  combinations = []
  modifiers.combination(5) do |a, b, c, d, e|
    combinations << "#{a} #{b} #{c} #{d} #{e}"
  end
  modifiers.combination(4) do |a, b, c, d|
    combinations << "#{a} #{b} #{c} #{d}"
  end
  modifiers.combination(3) do |a, b, c|
    combinations << "#{a} #{b} #{c}"
  end
  modifiers.combination(2) do |a, b|
    combinations << "#{a} #{b}"
  end
  modifiers.combination(1) do |a|
    combinations << "#{a}"
  end

  results = []
  ['COMMAND_L', 'COMMAND_R'].each do |command|
    ['CONTROL_L', 'CONTROL_R'].each do |control|
      ['OPTION_L', 'OPTION_R'].each do |option|
        ['SHIFT_L', 'SHIFT_R'].each do |shift|
          combinations.each do |c|
            r = c.
              gsub('COMMAND', command).
              gsub('CONTROL', control).
              gsub('OPTION', option).
              gsub('SHIFT', shift).
              gsub(/\s+/, ' ').
              strip
            results << r unless r.empty?
          end
        end
      end
    end
  end

  results.uniq!
  results.sort! do |a, b|
    if b.split(/ /).count == a.split(/ /).count then
      a <=> b
    else
      b.split(/ /).count <=> a.split(/ /).count
    end
  end

  results
end

['COMMAND_L', 'COMMAND_R',
 'CONTROL_L', 'CONTROL_R',
 'FN',
 'OPTION_L', 'OPTION_R',
 'SHIFT_L', 'SHIFT_R'].each do |target_modifier|
  open("../include/checkbox/commons/sticky_modifiers/#{target_modifier}.xml", 'w') do |outfile|
    outfile << "<?xml version=\"1.0\"?>\n"
    outfile << "<root>\n"
    outfile << "  <!-- This file is generated by src/core/server/Resources/generator/sticky_modifier.rb -->\n"

    get_modifiers(target_modifier.gsub(/_[LR]$/, '')).each do |modifiers|
      a = modifiers.split(/ /)
      modifierflags = a.collect {|i| "ModifierFlag::#{i}"}.join(" |\n    ")

      stickykeys = ["KeyCode::VK_STICKY_#{target_modifier}"]
      stickykeys += a.collect {|i| "KeyCode::VK_STICKY_#{i}_FORCE_ON"}

      outfile << "  <autogen>\n"
      outfile << "    __KeyOverlaidModifier__\n"
      outfile << "    KeyCode::#{target_modifier},\n"
      outfile << "    #{modifierflags},\n"
      outfile << "\n"
      outfile << "    KeyCode::#{target_modifier},\n"
      outfile << "    #{modifierflags},\n"
      outfile << "\n"
      outfile << "    #{stickykeys.join(",\n    ")},\n"
      outfile << "  </autogen>\n"
    end

    outfile << "  <autogen>\n"
    outfile << "    __KeyOverlaidModifier__\n"
    outfile << "    KeyCode::#{target_modifier},\n"
    outfile << "    KeyCode::#{target_modifier},\n"
    outfile << "    KeyCode::VK_STICKY_#{target_modifier},\n"
    outfile << "  </autogen>\n"

    outfile << "</root>\n"
  end
end
